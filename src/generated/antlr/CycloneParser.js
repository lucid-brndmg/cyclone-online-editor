// Generated from raw/grammar/CycloneParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CycloneParserListener from './CycloneParserListener.js';
const serializedATN = [4,1,114,937,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
1,4,5,4,190,8,4,10,4,12,4,193,9,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
5,5,5,205,8,5,10,5,12,5,208,9,5,1,5,5,5,211,8,5,10,5,12,5,214,9,5,1,5,5,
5,217,8,5,10,5,12,5,220,9,5,1,5,5,5,223,8,5,10,5,12,5,226,9,5,1,5,3,5,229,
8,5,1,5,1,5,1,6,5,6,234,8,6,10,6,12,6,237,9,6,1,6,1,6,1,6,1,6,1,7,1,7,5,
7,245,8,7,10,7,12,7,248,9,7,1,7,1,7,1,8,1,8,3,8,254,8,8,1,8,1,8,1,9,1,9,
1,9,1,9,1,9,1,9,1,9,3,9,265,8,9,1,9,1,9,1,9,3,9,270,8,9,1,9,1,9,1,10,1,10,
1,11,1,11,1,11,5,11,279,8,11,10,11,12,11,282,9,11,1,11,1,11,3,11,286,8,11,
1,11,1,11,3,11,290,8,11,3,11,292,8,11,1,12,1,12,1,12,1,12,5,12,298,8,12,
10,12,12,12,301,9,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,309,8,13,1,14,1,
14,1,14,1,14,1,14,5,14,316,8,14,10,14,12,14,319,9,14,1,14,1,14,1,15,1,15,
1,15,1,15,1,16,1,16,1,16,1,16,1,16,5,16,332,8,16,10,16,12,16,335,9,16,1,
16,1,16,1,16,1,17,1,17,1,17,3,17,343,8,17,1,17,3,17,346,8,17,1,17,3,17,349,
8,17,1,18,1,18,1,18,1,18,5,18,355,8,18,10,18,12,18,358,9,18,1,19,1,19,1,
19,1,19,1,19,5,19,365,8,19,10,19,12,19,368,9,19,1,19,1,19,1,20,1,20,1,20,
1,20,1,20,5,20,377,8,20,10,20,12,20,380,9,20,1,20,1,20,1,21,1,21,1,21,1,
21,1,21,5,21,389,8,21,10,21,12,21,392,9,21,1,21,1,21,1,22,1,22,1,22,3,22,
399,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,
1,27,1,27,1,27,5,27,417,8,27,10,27,12,27,420,9,27,1,28,1,28,1,28,5,28,425,
8,28,10,28,12,28,428,9,28,1,29,1,29,1,29,5,29,433,8,29,10,29,12,29,436,9,
29,1,30,1,30,1,30,1,30,3,30,442,8,30,1,31,1,31,1,31,3,31,447,8,31,1,32,1,
32,1,32,1,32,1,33,1,33,3,33,455,8,33,1,33,1,33,3,33,459,8,33,3,33,461,8,
33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,469,8,33,1,33,1,33,3,33,473,8,33,1,
33,1,33,3,33,477,8,33,1,33,1,33,3,33,481,8,33,3,33,483,8,33,1,33,1,33,1,
33,1,33,1,33,1,33,1,33,3,33,492,8,33,1,33,1,33,3,33,496,8,33,1,33,1,33,3,
33,500,8,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,508,8,34,10,34,12,34,511,
9,34,1,34,1,34,3,34,515,8,34,3,34,517,8,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,5,34,526,8,34,10,34,12,34,529,9,34,1,34,1,34,3,34,533,8,34,3,34,535,
8,34,4,34,537,8,34,11,34,12,34,538,1,34,1,34,3,34,543,8,34,1,34,1,34,3,34,
547,8,34,3,34,549,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,558,8,34,
10,34,12,34,561,9,34,1,34,1,34,3,34,565,8,34,3,34,567,8,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,5,34,576,8,34,10,34,12,34,579,9,34,1,34,1,34,3,34,583,
8,34,3,34,585,8,34,4,34,587,8,34,11,34,12,34,588,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,3,34,598,8,34,1,34,1,34,3,34,602,8,34,3,34,604,8,34,1,35,1,35,
1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,618,8,38,1,39,1,39,
1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,
45,1,46,1,46,1,46,1,46,1,47,4,47,642,8,47,11,47,12,47,643,1,48,1,48,1,48,
1,48,1,49,1,49,1,49,1,49,1,49,5,49,655,8,49,10,49,12,49,658,9,49,1,49,1,
49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,670,8,51,10,51,12,51,673,
9,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,681,8,52,10,52,12,52,684,9,52,1,
52,1,52,1,53,1,53,1,54,1,54,3,54,692,8,54,1,55,1,55,1,56,1,56,1,56,1,56,
1,56,5,56,701,8,56,10,56,12,56,704,9,56,1,56,1,56,1,57,1,57,1,58,1,58,1,
58,3,58,713,8,58,1,58,3,58,716,8,58,1,59,1,59,1,59,1,60,1,60,1,61,3,61,724,
8,61,1,61,1,61,3,61,728,8,61,1,61,1,61,3,61,732,8,61,1,61,1,61,1,62,1,62,
1,62,1,63,1,63,1,63,3,63,742,8,63,1,64,1,64,1,64,5,64,747,8,64,10,64,12,
64,750,9,64,1,65,1,65,1,65,5,65,755,8,65,10,65,12,65,758,9,65,1,66,1,66,
1,66,5,66,763,8,66,10,66,12,66,766,9,66,1,67,1,67,1,67,5,67,771,8,67,10,
67,12,67,774,9,67,1,68,1,68,1,68,5,68,779,8,68,10,68,12,68,782,9,68,1,69,
1,69,1,69,5,69,787,8,69,10,69,12,69,790,9,69,1,70,1,70,1,70,5,70,795,8,70,
10,70,12,70,798,9,70,1,71,1,71,1,71,5,71,803,8,71,10,71,12,71,806,9,71,1,
72,1,72,1,72,5,72,811,8,72,10,72,12,72,814,9,72,1,73,1,73,1,73,1,73,1,73,
3,73,821,8,73,1,74,1,74,1,74,1,74,3,74,827,8,74,3,74,829,8,74,1,75,1,75,
1,75,1,75,4,75,835,8,75,11,75,12,75,836,1,75,1,75,1,76,1,76,1,76,1,76,1,
76,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,
5,79,860,8,79,10,79,12,79,863,9,79,1,79,4,79,866,8,79,11,79,12,79,867,1,
79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,877,8,80,1,80,1,80,1,80,1,80,1,80,
5,80,884,8,80,10,80,12,80,887,9,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,
82,1,82,1,82,1,82,1,82,1,82,3,82,902,8,82,1,83,1,83,1,83,3,83,907,8,83,1,
84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,5,85,918,8,85,10,85,12,85,921,
9,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,3,86,930,8,86,1,87,1,87,1,87,1,87,
1,87,1,87,0,0,88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,0,20,1,0,49,55,1,0,58,59,1,0,56,57,1,0,60,62,1,0,
65,66,1,0,1,2,2,0,81,81,89,89,3,0,82,82,91,91,100,100,2,0,83,83,87,87,1,
0,85,86,1,0,75,78,1,0,47,48,2,0,68,70,72,72,1,0,97,98,2,0,11,11,40,43,2,
0,21,21,46,46,2,0,12,13,17,18,2,0,20,20,28,28,2,0,26,27,37,37,1,0,34,35,
967,0,176,1,0,0,0,2,178,1,0,0,0,4,180,1,0,0,0,6,186,1,0,0,0,8,191,1,0,0,
0,10,199,1,0,0,0,12,235,1,0,0,0,14,242,1,0,0,0,16,251,1,0,0,0,18,257,1,0,
0,0,20,273,1,0,0,0,22,291,1,0,0,0,24,293,1,0,0,0,26,304,1,0,0,0,28,310,1,
0,0,0,30,322,1,0,0,0,32,326,1,0,0,0,34,339,1,0,0,0,36,350,1,0,0,0,38,359,
1,0,0,0,40,371,1,0,0,0,42,383,1,0,0,0,44,395,1,0,0,0,46,402,1,0,0,0,48,406,
1,0,0,0,50,409,1,0,0,0,52,411,1,0,0,0,54,413,1,0,0,0,56,421,1,0,0,0,58,429,
1,0,0,0,60,441,1,0,0,0,62,446,1,0,0,0,64,448,1,0,0,0,66,499,1,0,0,0,68,603,
1,0,0,0,70,605,1,0,0,0,72,607,1,0,0,0,74,609,1,0,0,0,76,617,1,0,0,0,78,619,
1,0,0,0,80,621,1,0,0,0,82,623,1,0,0,0,84,625,1,0,0,0,86,627,1,0,0,0,88,629,
1,0,0,0,90,631,1,0,0,0,92,636,1,0,0,0,94,641,1,0,0,0,96,645,1,0,0,0,98,649,
1,0,0,0,100,661,1,0,0,0,102,665,1,0,0,0,104,676,1,0,0,0,106,687,1,0,0,0,
108,691,1,0,0,0,110,693,1,0,0,0,112,695,1,0,0,0,114,707,1,0,0,0,116,709,
1,0,0,0,118,717,1,0,0,0,120,720,1,0,0,0,122,723,1,0,0,0,124,735,1,0,0,0,
126,738,1,0,0,0,128,743,1,0,0,0,130,751,1,0,0,0,132,759,1,0,0,0,134,767,
1,0,0,0,136,775,1,0,0,0,138,783,1,0,0,0,140,791,1,0,0,0,142,799,1,0,0,0,
144,807,1,0,0,0,146,820,1,0,0,0,148,828,1,0,0,0,150,830,1,0,0,0,152,840,
1,0,0,0,154,845,1,0,0,0,156,850,1,0,0,0,158,856,1,0,0,0,160,871,1,0,0,0,
162,890,1,0,0,0,164,901,1,0,0,0,166,903,1,0,0,0,168,908,1,0,0,0,170,912,
1,0,0,0,172,924,1,0,0,0,174,931,1,0,0,0,176,177,5,111,0,0,177,1,1,0,0,0,
178,179,3,4,2,0,179,3,1,0,0,0,180,181,5,96,0,0,181,182,3,6,3,0,182,183,5,
11,0,0,183,184,3,76,38,0,184,185,5,25,0,0,185,5,1,0,0,0,186,187,7,0,0,0,
187,7,1,0,0,0,188,190,3,4,2,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,
0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,7,1,0,0,195,
196,3,0,0,0,196,197,3,10,5,0,197,198,5,0,0,1,198,9,1,0,0,0,199,206,5,15,
0,0,200,205,3,102,51,0,201,205,3,98,49,0,202,205,3,90,45,0,203,205,3,156,
78,0,204,200,1,0,0,0,204,201,1,0,0,0,204,202,1,0,0,0,204,203,1,0,0,0,205,
208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,212,1,0,0,0,208,206,1,0,
0,0,209,211,3,12,6,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,
213,1,0,0,0,213,218,1,0,0,0,214,212,1,0,0,0,215,217,3,16,8,0,216,215,1,0,
0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,224,1,0,0,0,220,
218,1,0,0,0,221,223,3,26,13,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,
0,0,0,224,225,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,227,229,3,32,16,0,
228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,5,22,0,0,231,11,
1,0,0,0,232,234,3,74,37,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,
0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,7,2,0,0,239,240,
3,0,0,0,240,241,3,14,7,0,241,13,1,0,0,0,242,246,5,15,0,0,243,245,3,124,62,
0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,249,
1,0,0,0,248,246,1,0,0,0,249,250,5,22,0,0,250,15,1,0,0,0,251,253,7,3,0,0,
252,254,3,0,0,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,
3,18,9,0,256,17,1,0,0,0,257,258,5,15,0,0,258,259,3,0,0,0,259,260,3,20,10,
0,260,261,3,22,11,0,261,264,1,0,0,0,262,263,7,4,0,0,263,265,3,72,36,0,264,
262,1,0,0,0,264,265,1,0,0,0,265,269,1,0,0,0,266,267,3,118,59,0,267,268,5,
25,0,0,268,270,1,0,0,0,269,266,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,
272,5,22,0,0,272,19,1,0,0,0,273,274,7,5,0,0,274,21,1,0,0,0,275,280,3,0,0,
0,276,277,5,8,0,0,277,279,3,0,0,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,
1,0,0,0,280,281,1,0,0,0,281,292,1,0,0,0,282,280,1,0,0,0,283,285,5,27,0,0,
284,286,3,24,12,0,285,284,1,0,0,0,285,286,1,0,0,0,286,292,1,0,0,0,287,289,
5,28,0,0,288,290,3,24,12,0,289,288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,
0,291,275,1,0,0,0,291,283,1,0,0,0,291,287,1,0,0,0,292,23,1,0,0,0,293,294,
5,16,0,0,294,299,3,0,0,0,295,296,5,8,0,0,296,298,3,0,0,0,297,295,1,0,0,0,
298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,
1,0,0,0,302,303,5,23,0,0,303,25,1,0,0,0,304,305,5,67,0,0,305,306,3,0,0,0,
306,308,3,30,15,0,307,309,3,28,14,0,308,307,1,0,0,0,308,309,1,0,0,0,309,
27,1,0,0,0,310,311,5,94,0,0,311,312,5,19,0,0,312,317,3,0,0,0,313,314,5,8,
0,0,314,316,3,0,0,0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,
318,1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,321,5,24,0,0,321,29,1,0,
0,0,322,323,5,15,0,0,323,324,3,124,62,0,324,325,5,22,0,0,325,31,1,0,0,0,
326,327,5,80,0,0,327,333,5,15,0,0,328,332,3,44,22,0,329,332,3,46,23,0,330,
332,3,122,61,0,331,328,1,0,0,0,331,329,1,0,0,0,331,330,1,0,0,0,332,335,1,
0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,
337,3,34,17,0,337,338,5,22,0,0,338,33,1,0,0,0,339,340,7,6,0,0,340,342,3,
36,18,0,341,343,3,40,20,0,342,341,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,
0,344,346,3,42,21,0,345,344,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,
349,3,38,19,0,348,347,1,0,0,0,348,349,1,0,0,0,349,35,1,0,0,0,350,351,7,7,
0,0,351,356,3,78,39,0,352,353,5,8,0,0,353,355,3,78,39,0,354,352,1,0,0,0,
355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,37,1,0,0,0,358,356,1,
0,0,0,359,360,7,8,0,0,360,361,5,19,0,0,361,366,3,0,0,0,362,363,5,8,0,0,363,
365,3,0,0,0,364,362,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,
0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,5,24,0,0,370,39,1,0,0,0,371,
372,7,9,0,0,372,373,5,19,0,0,373,378,3,50,25,0,374,375,5,8,0,0,375,377,3,
50,25,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,
379,381,1,0,0,0,380,378,1,0,0,0,381,382,5,24,0,0,382,41,1,0,0,0,383,384,
5,88,0,0,384,385,5,19,0,0,385,390,3,0,0,0,386,387,5,8,0,0,387,389,3,0,0,
0,388,386,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,393,
1,0,0,0,392,390,1,0,0,0,393,394,5,24,0,0,394,43,1,0,0,0,395,396,5,90,0,0,
396,398,3,0,0,0,397,399,3,48,24,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,
1,0,0,0,400,401,5,25,0,0,401,45,1,0,0,0,402,403,3,0,0,0,403,404,3,48,24,
0,404,405,5,25,0,0,405,47,1,0,0,0,406,407,5,11,0,0,407,408,3,52,26,0,408,
49,1,0,0,0,409,410,3,52,26,0,410,51,1,0,0,0,411,412,3,54,27,0,412,53,1,0,
0,0,413,418,3,56,28,0,414,415,5,38,0,0,415,417,3,56,28,0,416,414,1,0,0,0,
417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,55,1,0,0,0,420,418,1,
0,0,0,421,426,3,58,29,0,422,423,5,39,0,0,423,425,3,58,29,0,424,422,1,0,0,
0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,57,1,0,0,0,428,426,
1,0,0,0,429,434,3,60,30,0,430,431,5,32,0,0,431,433,3,60,30,0,432,430,1,0,
0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,59,1,0,0,0,436,434,
1,0,0,0,437,438,5,31,0,0,438,442,3,60,30,0,439,442,3,62,31,0,440,442,3,64,
32,0,441,437,1,0,0,0,441,439,1,0,0,0,441,440,1,0,0,0,442,61,1,0,0,0,443,
447,3,66,33,0,444,447,3,68,34,0,445,447,3,82,41,0,446,443,1,0,0,0,446,444,
1,0,0,0,446,445,1,0,0,0,447,63,1,0,0,0,448,449,5,19,0,0,449,450,3,52,26,
0,450,451,5,24,0,0,451,65,1,0,0,0,452,454,5,44,0,0,453,455,3,78,39,0,454,
453,1,0,0,0,454,455,1,0,0,0,455,461,1,0,0,0,456,458,5,45,0,0,457,459,3,78,
39,0,458,457,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,452,1,0,0,0,460,
456,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,472,3,0,0,0,463,464,5,32,
0,0,464,465,5,15,0,0,465,468,3,78,39,0,466,467,5,5,0,0,467,469,3,78,39,0,
468,466,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,5,22,0,0,471,473,
1,0,0,0,472,463,1,0,0,0,472,473,1,0,0,0,473,500,1,0,0,0,474,476,5,44,0,0,
475,477,3,78,39,0,476,475,1,0,0,0,476,477,1,0,0,0,477,483,1,0,0,0,478,480,
5,45,0,0,479,481,3,78,39,0,480,479,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,
0,482,474,1,0,0,0,482,478,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,
5,19,0,0,485,495,3,0,0,0,486,487,5,32,0,0,487,488,5,15,0,0,488,491,3,78,
39,0,489,490,5,5,0,0,490,492,3,78,39,0,491,489,1,0,0,0,491,492,1,0,0,0,492,
493,1,0,0,0,493,494,5,22,0,0,494,496,1,0,0,0,495,486,1,0,0,0,495,496,1,0,
0,0,496,497,1,0,0,0,497,498,5,24,0,0,498,500,1,0,0,0,499,460,1,0,0,0,499,
482,1,0,0,0,500,67,1,0,0,0,501,517,3,0,0,0,502,514,3,70,35,0,503,504,5,16,
0,0,504,509,3,0,0,0,505,506,5,8,0,0,506,508,3,0,0,0,507,505,1,0,0,0,508,
511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,509,1,0,
0,0,512,513,5,23,0,0,513,515,1,0,0,0,514,503,1,0,0,0,514,515,1,0,0,0,515,
517,1,0,0,0,516,501,1,0,0,0,516,502,1,0,0,0,517,536,1,0,0,0,518,534,5,1,
0,0,519,535,3,0,0,0,520,532,3,70,35,0,521,522,5,16,0,0,522,527,3,0,0,0,523,
524,5,8,0,0,524,526,3,0,0,0,525,523,1,0,0,0,526,529,1,0,0,0,527,525,1,0,
0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,527,1,0,0,0,530,531,5,23,0,0,531,
533,1,0,0,0,532,521,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,519,1,0,
0,0,534,520,1,0,0,0,535,537,1,0,0,0,536,518,1,0,0,0,537,538,1,0,0,0,538,
536,1,0,0,0,538,539,1,0,0,0,539,604,1,0,0,0,540,542,5,44,0,0,541,543,3,78,
39,0,542,541,1,0,0,0,542,543,1,0,0,0,543,549,1,0,0,0,544,546,5,45,0,0,545,
547,3,78,39,0,546,545,1,0,0,0,546,547,1,0,0,0,547,549,1,0,0,0,548,540,1,
0,0,0,548,544,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,566,5,19,0,0,551,
567,3,0,0,0,552,564,3,70,35,0,553,554,5,16,0,0,554,559,3,0,0,0,555,556,5,
8,0,0,556,558,3,0,0,0,557,555,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,
560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,563,5,23,0,0,563,565,1,0,
0,0,564,553,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,551,1,0,0,0,566,
552,1,0,0,0,567,586,1,0,0,0,568,584,5,1,0,0,569,585,3,0,0,0,570,582,3,70,
35,0,571,572,5,16,0,0,572,577,3,0,0,0,573,574,5,8,0,0,574,576,3,0,0,0,575,
573,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,580,1,0,
0,0,579,577,1,0,0,0,580,581,5,23,0,0,581,583,1,0,0,0,582,571,1,0,0,0,582,
583,1,0,0,0,583,585,1,0,0,0,584,569,1,0,0,0,584,570,1,0,0,0,585,587,1,0,
0,0,586,568,1,0,0,0,587,588,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,
590,1,0,0,0,590,601,5,24,0,0,591,592,5,32,0,0,592,593,5,15,0,0,593,594,3,
78,39,0,594,597,1,0,0,0,595,596,5,5,0,0,596,598,3,78,39,0,597,595,1,0,0,
0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,5,22,0,0,600,602,1,0,0,0,601,591,
1,0,0,0,601,602,1,0,0,0,602,604,1,0,0,0,603,516,1,0,0,0,603,548,1,0,0,0,
604,69,1,0,0,0,605,606,5,33,0,0,606,71,1,0,0,0,607,608,5,108,0,0,608,73,
1,0,0,0,609,610,7,10,0,0,610,75,1,0,0,0,611,618,3,78,39,0,612,618,3,80,40,
0,613,618,3,82,41,0,614,618,3,84,42,0,615,618,3,86,43,0,616,618,3,88,44,
0,617,611,1,0,0,0,617,612,1,0,0,0,617,613,1,0,0,0,617,614,1,0,0,0,617,615,
1,0,0,0,617,616,1,0,0,0,618,77,1,0,0,0,619,620,5,105,0,0,620,79,1,0,0,0,
621,622,5,106,0,0,622,81,1,0,0,0,623,624,5,109,0,0,624,83,1,0,0,0,625,626,
5,108,0,0,626,85,1,0,0,0,627,628,5,107,0,0,628,87,1,0,0,0,629,630,5,110,
0,0,630,89,1,0,0,0,631,632,5,63,0,0,632,633,3,0,0,0,633,634,3,92,46,0,634,
635,5,25,0,0,635,91,1,0,0,0,636,637,5,15,0,0,637,638,3,94,47,0,638,639,5,
22,0,0,639,93,1,0,0,0,640,642,3,96,48,0,641,640,1,0,0,0,642,643,1,0,0,0,
643,641,1,0,0,0,643,644,1,0,0,0,644,95,1,0,0,0,645,646,3,108,54,0,646,647,
3,116,58,0,647,648,5,25,0,0,648,97,1,0,0,0,649,650,5,64,0,0,650,651,3,108,
54,0,651,656,3,100,50,0,652,653,5,8,0,0,653,655,3,100,50,0,654,652,1,0,0,
0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,656,
1,0,0,0,659,660,5,25,0,0,660,99,1,0,0,0,661,662,3,0,0,0,662,663,5,11,0,0,
663,664,3,120,60,0,664,101,1,0,0,0,665,666,3,108,54,0,666,671,3,116,58,0,
667,668,5,8,0,0,668,670,3,116,58,0,669,667,1,0,0,0,670,673,1,0,0,0,671,669,
1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,671,1,0,0,0,674,675,5,25,0,0,
675,103,1,0,0,0,676,677,3,108,54,0,677,682,3,116,58,0,678,679,5,8,0,0,679,
681,3,116,58,0,680,678,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,
0,0,0,683,685,1,0,0,0,684,682,1,0,0,0,685,686,5,25,0,0,686,105,1,0,0,0,687,
688,7,11,0,0,688,107,1,0,0,0,689,692,3,110,55,0,690,692,3,112,56,0,691,689,
1,0,0,0,691,690,1,0,0,0,692,109,1,0,0,0,693,694,7,12,0,0,694,111,1,0,0,0,
695,696,5,73,0,0,696,697,5,15,0,0,697,702,3,114,57,0,698,699,5,8,0,0,699,
701,3,114,57,0,700,698,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,
0,0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,706,5,22,0,0,706,113,1,0,0,0,707,
708,3,0,0,0,708,115,1,0,0,0,709,712,3,0,0,0,710,711,5,11,0,0,711,713,3,120,
60,0,712,710,1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,714,716,3,118,59,0,
715,714,1,0,0,0,715,716,1,0,0,0,716,117,1,0,0,0,717,718,5,74,0,0,718,719,
3,126,63,0,719,119,1,0,0,0,720,721,3,126,63,0,721,121,1,0,0,0,722,724,3,
174,87,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,727,5,92,0,
0,726,728,7,13,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,731,
3,126,63,0,730,732,3,28,14,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,
0,0,733,734,5,25,0,0,734,123,1,0,0,0,735,736,3,126,63,0,736,737,5,25,0,0,
737,125,1,0,0,0,738,741,3,128,64,0,739,740,7,14,0,0,740,742,3,126,63,0,741,
739,1,0,0,0,741,742,1,0,0,0,742,127,1,0,0,0,743,748,3,130,65,0,744,745,5,
30,0,0,745,747,3,130,65,0,746,744,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,
0,748,749,1,0,0,0,749,129,1,0,0,0,750,748,1,0,0,0,751,756,3,132,66,0,752,
753,5,38,0,0,753,755,3,132,66,0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,
1,0,0,0,756,757,1,0,0,0,757,131,1,0,0,0,758,756,1,0,0,0,759,764,3,134,67,
0,760,761,5,39,0,0,761,763,3,134,67,0,762,760,1,0,0,0,763,766,1,0,0,0,764,
762,1,0,0,0,764,765,1,0,0,0,765,133,1,0,0,0,766,764,1,0,0,0,767,772,3,136,
68,0,768,769,5,32,0,0,769,771,3,136,68,0,770,768,1,0,0,0,771,774,1,0,0,0,
772,770,1,0,0,0,772,773,1,0,0,0,773,135,1,0,0,0,774,772,1,0,0,0,775,780,
3,138,69,0,776,777,7,15,0,0,777,779,3,138,69,0,778,776,1,0,0,0,779,782,1,
0,0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,137,1,0,0,0,782,780,1,0,0,0,783,
788,3,140,70,0,784,785,7,16,0,0,785,787,3,140,70,0,786,784,1,0,0,0,787,790,
1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,139,1,0,0,0,790,788,1,0,0,0,
791,796,3,142,71,0,792,793,7,17,0,0,793,795,3,142,71,0,794,792,1,0,0,0,795,
798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,141,1,0,0,0,798,796,1,0,
0,0,799,804,3,144,72,0,800,801,7,18,0,0,801,803,3,144,72,0,802,800,1,0,0,
0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,143,1,0,0,0,806,804,
1,0,0,0,807,812,3,146,73,0,808,809,5,36,0,0,809,811,3,146,73,0,810,808,1,
0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,145,1,0,0,0,814,
812,1,0,0,0,815,816,5,28,0,0,816,821,3,146,73,0,817,818,5,20,0,0,818,821,
3,146,73,0,819,821,3,148,74,0,820,815,1,0,0,0,820,817,1,0,0,0,820,819,1,
0,0,0,821,147,1,0,0,0,822,823,5,31,0,0,823,829,3,146,73,0,824,826,3,164,
82,0,825,827,7,19,0,0,826,825,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,
822,1,0,0,0,828,824,1,0,0,0,829,149,1,0,0,0,830,831,5,99,0,0,831,834,5,19,
0,0,832,833,5,8,0,0,833,835,3,126,63,0,834,832,1,0,0,0,835,836,1,0,0,0,836,
834,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,839,5,24,0,0,839,151,1,0,
0,0,840,841,5,95,0,0,841,842,5,19,0,0,842,843,3,0,0,0,843,844,5,24,0,0,844,
153,1,0,0,0,845,846,5,93,0,0,846,847,5,19,0,0,847,848,3,166,83,0,848,849,
5,24,0,0,849,155,1,0,0,0,850,851,5,101,0,0,851,852,3,0,0,0,852,853,5,5,0,
0,853,854,3,110,55,0,854,855,3,158,79,0,855,157,1,0,0,0,856,857,3,160,80,
0,857,861,5,15,0,0,858,860,3,104,52,0,859,858,1,0,0,0,860,863,1,0,0,0,861,
859,1,0,0,0,861,862,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,864,866,3,124,
62,0,865,864,1,0,0,0,866,867,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,
869,1,0,0,0,869,870,5,22,0,0,870,159,1,0,0,0,871,876,5,19,0,0,872,873,3,
0,0,0,873,874,5,5,0,0,874,875,3,110,55,0,875,877,1,0,0,0,876,872,1,0,0,0,
876,877,1,0,0,0,877,885,1,0,0,0,878,879,5,8,0,0,879,880,3,0,0,0,880,881,
5,5,0,0,881,882,3,110,55,0,882,884,1,0,0,0,883,878,1,0,0,0,884,887,1,0,0,
0,885,883,1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,887,885,1,0,0,0,888,889,
5,24,0,0,889,161,1,0,0,0,890,891,5,102,0,0,891,892,3,126,63,0,892,163,1,
0,0,0,893,902,3,168,84,0,894,902,3,166,83,0,895,902,3,76,38,0,896,902,3,
154,77,0,897,902,3,152,76,0,898,902,3,150,75,0,899,902,3,162,81,0,900,902,
3,170,85,0,901,893,1,0,0,0,901,894,1,0,0,0,901,895,1,0,0,0,901,896,1,0,0,
0,901,897,1,0,0,0,901,898,1,0,0,0,901,899,1,0,0,0,901,900,1,0,0,0,902,165,
1,0,0,0,903,906,3,0,0,0,904,905,5,9,0,0,905,907,3,0,0,0,906,904,1,0,0,0,
906,907,1,0,0,0,907,167,1,0,0,0,908,909,5,19,0,0,909,910,3,126,63,0,910,
911,5,24,0,0,911,169,1,0,0,0,912,913,3,0,0,0,913,914,5,19,0,0,914,919,3,
126,63,0,915,916,5,8,0,0,916,918,3,126,63,0,917,915,1,0,0,0,918,921,1,0,
0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,919,1,0,0,0,922,
923,5,24,0,0,923,171,1,0,0,0,924,925,5,103,0,0,925,926,3,168,84,0,926,929,
3,124,62,0,927,928,5,104,0,0,928,930,3,124,62,0,929,927,1,0,0,0,929,930,
1,0,0,0,930,173,1,0,0,0,931,932,5,3,0,0,932,933,5,66,0,0,933,934,5,5,0,0,
934,935,3,0,0,0,935,175,1,0,0,0,99,191,204,206,212,218,224,228,235,246,253,
264,269,280,285,289,291,299,308,317,331,333,342,345,348,356,366,378,390,
398,418,426,434,441,446,454,458,460,468,472,476,480,482,491,495,499,509,
514,516,527,532,534,538,542,546,548,559,564,566,577,582,584,588,597,601,
603,617,643,656,671,682,691,702,712,715,723,727,731,741,748,756,764,772,
780,788,796,804,812,820,826,828,836,861,867,876,885,901,906,919,929];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CycloneParser extends antlr4.Parser {

    static grammarFileName = "CycloneParser.g4";
    static literalNames = [ null, "'->'", "'<->'", "'@'", "'|'", "':'", 
                            "'::'", "':='", "','", "'.'", "'..'", "'='", 
                            "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", 
                            "'('", "'-'", "'!='", "'}'", "']'", "')'", "';'", 
                            "'/'", "'*'", "'+'", "'xor'", "'=>'", "'!'", 
                            "'^'", "'_'", "'++'", "'--'", "'**'", "'%'", 
                            "'||'", "'&&'", "'+='", "'-='", "'*='", "'/='", 
                            "'<<'", "'>>'", "'=='", "'global'", "'native'", 
                            "'debug'", "'log'", "'output'", "'trace'", "'precision'", 
                            "'timeout'", "'detect'", "'state'", "'node'", 
                            "'machine'", "'graph'", "'transition'", "'trans'", 
                            "'edge'", "'record'", "'const'", "'on'", "'label'", 
                            "'invariant'", "'int'", "'bool'", "'real'", 
                            "'char'", "'string'", "'enum'", "'where'", "'start'", 
                            "'final'", "'abstract'", "'normal'", "'prev'", 
                            "'goal'", "'check'", "'for'", "'stop'", "'at'", 
                            "'via'", "'condition'", "'reach'", "'with'", 
                            "'enumerate'", "'let'", "'each'", "'assert'", 
                            "'initial'", "'in'", "'fresh'", "'option-'", 
                            "'always'", "'some'", "'one'", "'upto'", "'function'", 
                            "'return'", "'if'", "'else'" ];
    static symbolicNames = [ null, "ARROW", "BI_ARROW", "AT_SIGN", "BAR", 
                             "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", 
                             "DOT", "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", 
                             "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", 
                             "LPAREN", "MINUS", "NOT_EQUAL", "RBRACE", "RBRACK", 
                             "RPAREN", "SEMI", "SLASH", "STAR", "PLUS", 
                             "XOR", "IMPLIES", "NOT", "HAT", "P_OP_ONE", 
                             "PLUS_PLUS", "MINUS_MINUS", "TIMES_TIMES", 
                             "MOD", "OR", "AND", "ASSIGN_PLUS_EQ", "ASSIGN_MINUS_EQ", 
                             "ASSIGN_TIMES_EQ", "ASSIGN_DIV_EQ", "SHIFT_LEFT", 
                             "SHIFT_RIGHT", "DOUBLE_EQUAL", "GLOBAL", "NATIVE", 
                             "DEBUG", "LOG", "OUTPUT", "TRACE", "PRECISION", 
                             "TIMEOUT", "DETECT", "STATE", "NODE", "MACHINE", 
                             "GRAPH", "TRANS1", "TRANS2", "EDGE", "RECORD", 
                             "CONST", "ON", "LABEL", "INVARIANT", "INT", 
                             "BOOL", "REAL", "CHAR", "STRING", "ENUM", "WHERE", 
                             "START", "FINAL", "ABSTRACT", "NORMAL", "PREV", 
                             "GOAL", "CHECK", "FOR", "STOP", "AT", "VIA", 
                             "CONDITION", "REACH", "WITH", "ENUMERATE", 
                             "LET", "EACH", "ASSERT", "INITIAL", "IN", "FRESH", 
                             "OPTION", "ALWAYS", "SOME", "ONE", "UPTO", 
                             "FUNCTION", "RETURN", "IF", "ELSE", "INTLITERAL", 
                             "REALLITERAL", "CHARLITERAL", "STRINGLITERAL", 
                             "BOOLLITERAL", "ENUMLITERAL", "IDENT", "ML_COMMENT", 
                             "SL_COMMENT", "WS" ];
    static ruleNames = [ "identifier", "head", "compOptions", "optionName", 
                         "machine", "machineScope", "stateExpr", "stateScope", 
                         "trans", "transScope", "transOp", "transDef", "transExclExpr", 
                         "invariantExpression", "inExpr", "invariantScope", 
                         "goal", "checkExpr", "forExpr", "stopExpr", "viaExpr", 
                         "withExpr", "letExpr", "pathAssignStatement", "pathCondAssignExpr", 
                         "pathExpr", "pathCondition", "orPathCondition", 
                         "andPathCondition", "xorPathCondition", "unaryPathCondition", 
                         "primaryCondition", "parPathCondition", "stateIncExpr", 
                         "pathPrimaryExpr", "pathOp", "label", "stateModifier", 
                         "literal", "intLiteral", "realLiteral", "boolLiteral", 
                         "stringLiteral", "charLiteral", "enumLiteral", 
                         "record", "recordScope", "recordVariableDeclGroup", 
                         "recordVariableDecl", "globalConstantGroup", "globalConstantDecl", 
                         "globalVariableGroup", "localVariableGroup", "modifier", 
                         "type", "primitiveType", "enumType", "enumDecl", 
                         "variableDeclarator", "whereExpr", "variableInitializer", 
                         "assertExpr", "statement", "expression", "conditionalImpliesExpression", 
                         "conditionalOrExpression", "conditionalAndExpression", 
                         "conditionalXorExpression", "equalityExpression", 
                         "relationalExpression", "additiveExpression", "multiplicativeExpression", 
                         "powExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
                         "oneExpr", "freshExpr", "initialExpr", "functionDeclaration", 
                         "functionBodyScope", "functionParamsDecl", "returnExpr", 
                         "primary", "dotIdentifierExpr", "parExpression", 
                         "funCall", "iteStatement", "annotationExpr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CycloneParser.ruleNames;
        this.literalNames = CycloneParser.literalNames;
        this.symbolicNames = CycloneParser.symbolicNames;
    }



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CycloneParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 176;
	        this.match(CycloneParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	head() {
	    let localctx = new HeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CycloneParser.RULE_head);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 178;
	        this.compOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOptions() {
	    let localctx = new CompOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CycloneParser.RULE_compOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        this.match(CycloneParser.OPTION);
	        this.state = 181;
	        this.optionName();
	        this.state = 182;
	        this.match(CycloneParser.EQUAL);
	        this.state = 183;
	        this.literal();
	        this.state = 184;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionName() {
	    let localctx = new OptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CycloneParser.RULE_optionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 186;
	        _la = this._input.LA(1);
	        if(!(((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 127) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machine() {
	    let localctx = new MachineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CycloneParser.RULE_machine);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===96) {
	            this.state = 188;
	            this.compOptions();
	            this.state = 193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 194;
	        _la = this._input.LA(1);
	        if(!(_la===58 || _la===59)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 195;
	        this.identifier();
	        this.state = 196;
	        this.machineScope();
	        this.state = 197;
	        this.match(CycloneParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineScope() {
	    let localctx = new MachineScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CycloneParser.RULE_machineScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 199;
	        this.match(CycloneParser.LBRACE);
	        this.state = 206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 1763) !== 0) || _la===101) {
	            this.state = 204;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 68:
	            case 69:
	            case 70:
	            case 72:
	            case 73:
	                this.state = 200;
	                this.globalVariableGroup();
	                break;
	            case 64:
	                this.state = 201;
	                this.globalConstantGroup();
	                break;
	            case 63:
	                this.state = 202;
	                this.record();
	                break;
	            case 101:
	                this.state = 203;
	                this.functionDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 7864323) !== 0)) {
	            this.state = 209;
	            this.stateExpr();
	            this.state = 214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 7) !== 0)) {
	            this.state = 215;
	            this.trans();
	            this.state = 220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===67) {
	            this.state = 221;
	            this.invariantExpression();
	            this.state = 226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 227;
	            this.goal();
	        }

	        this.state = 230;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateExpr() {
	    let localctx = new StateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CycloneParser.RULE_stateExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 15) !== 0)) {
	            this.state = 232;
	            this.stateModifier();
	            this.state = 237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 238;
	        _la = this._input.LA(1);
	        if(!(_la===56 || _la===57)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 239;
	        this.identifier();
	        this.state = 240;
	        this.stateScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateScope() {
	    let localctx = new StateScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CycloneParser.RULE_stateScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this.match(CycloneParser.LBRACE);
	        this.state = 246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2417491968) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 520773) !== 0)) {
	            this.state = 243;
	            this.statement();
	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 249;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trans() {
	    let localctx = new TransContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CycloneParser.RULE_trans);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        _la = this._input.LA(1);
	        if(!(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 252;
	            this.identifier();
	        }

	        this.state = 255;
	        this.transScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transScope() {
	    let localctx = new TransScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CycloneParser.RULE_transScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this.match(CycloneParser.LBRACE);
	        this.state = 258;
	        this.identifier();

	        this.state = 259;
	        this.transOp();
	        this.state = 260;
	        this.transDef();
	        this.state = 264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65 || _la===66) {
	            this.state = 262;
	            _la = this._input.LA(1);
	            if(!(_la===65 || _la===66)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 263;
	            this.label();
	        }

	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 266;
	            this.whereExpr();
	            this.state = 267;
	            this.match(CycloneParser.SEMI);
	        }

	        this.state = 271;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transOp() {
	    let localctx = new TransOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CycloneParser.RULE_transOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===2)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transDef() {
	    let localctx = new TransDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CycloneParser.RULE_transDef);
	    var _la = 0;
	    try {
	        this.state = 291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 275;
	            this.identifier();
	            this.state = 280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===8) {
	                this.state = 276;
	                this.match(CycloneParser.COMMA);
	                this.state = 277;
	                this.identifier();
	                this.state = 282;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 283;
	            this.match(CycloneParser.STAR);
	            this.state = 285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 284;
	                this.transExclExpr();
	            }

	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 287;
	            this.match(CycloneParser.PLUS);
	            this.state = 289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 288;
	                this.transExclExpr();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transExclExpr() {
	    let localctx = new TransExclExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CycloneParser.RULE_transExclExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293;
	        this.match(CycloneParser.LBRACK);
	        this.state = 294;
	        this.identifier();
	        this.state = 299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 295;
	            this.match(CycloneParser.COMMA);
	            this.state = 296;
	            this.identifier();
	            this.state = 301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 302;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantExpression() {
	    let localctx = new InvariantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CycloneParser.RULE_invariantExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 304;
	        this.match(CycloneParser.INVARIANT);
	        this.state = 305;
	        this.identifier();
	        this.state = 306;
	        this.invariantScope();
	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 307;
	            this.inExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inExpr() {
	    let localctx = new InExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CycloneParser.RULE_inExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 310;
	        this.match(CycloneParser.IN);
	        this.state = 311;
	        this.match(CycloneParser.LPAREN);
	        this.state = 312;
	        this.identifier();
	        this.state = 317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 313;
	            this.match(CycloneParser.COMMA);
	            this.state = 314;
	            this.identifier();
	            this.state = 319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 320;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantScope() {
	    let localctx = new InvariantScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CycloneParser.RULE_invariantScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.match(CycloneParser.LBRACE);

	        this.state = 323;
	        this.statement();
	        this.state = 324;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goal() {
	    let localctx = new GoalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CycloneParser.RULE_goal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 326;
	        this.match(CycloneParser.GOAL);
	        this.state = 327;
	        this.match(CycloneParser.LBRACE);
	        this.state = 333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3 || ((((_la - 90)) & ~0x1f) === 0 && ((1 << (_la - 90)) & 2097157) !== 0)) {
	            this.state = 331;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 90:
	                this.state = 328;
	                this.letExpr();
	                break;
	            case 111:
	                this.state = 329;
	                this.pathAssignStatement();
	                break;
	            case 3:
	            case 92:
	                this.state = 330;
	                this.assertExpr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 336;
	        this.checkExpr();
	        this.state = 337;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkExpr() {
	    let localctx = new CheckExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CycloneParser.RULE_checkExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        _la = this._input.LA(1);
	        if(!(_la===81 || _la===89)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 340;
	        this.forExpr();
	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85 || _la===86) {
	            this.state = 341;
	            this.viaExpr();
	        }

	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 344;
	            this.withExpr();
	        }

	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83 || _la===87) {
	            this.state = 347;
	            this.stopExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpr() {
	    let localctx = new ForExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CycloneParser.RULE_forExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        _la = this._input.LA(1);
	        if(!(((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 262657) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 351;
	        this.intLiteral();
	        this.state = 356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 352;
	            this.match(CycloneParser.COMMA);
	            this.state = 353;
	            this.intLiteral();
	            this.state = 358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopExpr() {
	    let localctx = new StopExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CycloneParser.RULE_stopExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 359;
	        _la = this._input.LA(1);
	        if(!(_la===83 || _la===87)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 360;
	        this.match(CycloneParser.LPAREN);
	        this.state = 361;
	        this.identifier();
	        this.state = 366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 362;
	            this.match(CycloneParser.COMMA);
	            this.state = 363;
	            this.identifier();
	            this.state = 368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 369;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viaExpr() {
	    let localctx = new ViaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CycloneParser.RULE_viaExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        _la = this._input.LA(1);
	        if(!(_la===85 || _la===86)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 372;
	        this.match(CycloneParser.LPAREN);

	        this.state = 373;
	        this.pathExpr();
	        this.state = 378;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 374;
	            this.match(CycloneParser.COMMA);
	            this.state = 375;
	            this.pathExpr();
	            this.state = 380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 381;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withExpr() {
	    let localctx = new WithExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CycloneParser.RULE_withExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.match(CycloneParser.WITH);
	        this.state = 384;
	        this.match(CycloneParser.LPAREN);

	        this.state = 385;
	        this.identifier();
	        this.state = 390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 386;
	            this.match(CycloneParser.COMMA);
	            this.state = 387;
	            this.identifier();
	            this.state = 392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 393;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letExpr() {
	    let localctx = new LetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CycloneParser.RULE_letExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.match(CycloneParser.LET);
	        this.state = 396;
	        this.identifier();
	        this.state = 398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 397;
	            this.pathCondAssignExpr();
	        }

	        this.state = 400;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAssignStatement() {
	    let localctx = new PathAssignStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CycloneParser.RULE_pathAssignStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this.identifier();
	        this.state = 403;
	        this.pathCondAssignExpr();
	        this.state = 404;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondAssignExpr() {
	    let localctx = new PathCondAssignExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CycloneParser.RULE_pathCondAssignExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.match(CycloneParser.EQUAL);
	        this.state = 407;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpr() {
	    let localctx = new PathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CycloneParser.RULE_pathExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondition() {
	    let localctx = new PathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CycloneParser.RULE_pathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.orPathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orPathCondition() {
	    let localctx = new OrPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CycloneParser.RULE_orPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 413;
	        this.andPathCondition();
	        this.state = 418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 414;
	            this.match(CycloneParser.OR);
	            this.state = 415;
	            this.andPathCondition();
	            this.state = 420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andPathCondition() {
	    let localctx = new AndPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CycloneParser.RULE_andPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        this.xorPathCondition();
	        this.state = 426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===39) {
	            this.state = 422;
	            this.match(CycloneParser.AND);
	            this.state = 423;
	            this.xorPathCondition();
	            this.state = 428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorPathCondition() {
	    let localctx = new XorPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CycloneParser.RULE_xorPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.unaryPathCondition();
	        this.state = 434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===32) {
	            this.state = 430;
	            this.match(CycloneParser.HAT);
	            this.state = 431;
	            this.unaryPathCondition();
	            this.state = 436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryPathCondition() {
	    let localctx = new UnaryPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CycloneParser.RULE_unaryPathCondition);
	    try {
	        this.state = 441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 437;
	            this.match(CycloneParser.NOT);
	            this.state = 438;
	            this.unaryPathCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 439;
	            this.primaryCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 440;
	            this.parPathCondition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryCondition() {
	    let localctx = new PrimaryConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CycloneParser.RULE_primaryCondition);
	    try {
	        this.state = 446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 443;
	            this.stateIncExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 444;
	            this.pathPrimaryExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 445;
	            this.boolLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parPathCondition() {
	    let localctx = new ParPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CycloneParser.RULE_parPathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        this.match(CycloneParser.LPAREN);
	        this.state = 449;
	        this.pathCondition();
	        this.state = 450;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateIncExpr() {
	    let localctx = new StateIncExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CycloneParser.RULE_stateIncExpr);
	    var _la = 0;
	    try {
	        this.state = 499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 460;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 44:
	            	this.state = 452;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 454;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 453;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 45:
	            	this.state = 456;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 458;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 457;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 111:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 462;
	            this.identifier();
	            this.state = 472;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 463;
	                this.match(CycloneParser.HAT);
	                this.state = 464;
	                this.match(CycloneParser.LBRACE);
	                this.state = 465;
	                this.intLiteral();
	                this.state = 468;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 466;
	                    this.match(CycloneParser.COLON);
	                    this.state = 467;
	                    this.intLiteral();
	                }

	                this.state = 470;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 482;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 44:
	            	this.state = 474;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 476;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 475;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 45:
	            	this.state = 478;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 480;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 479;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 484;
	            this.match(CycloneParser.LPAREN);
	            this.state = 485;
	            this.identifier();
	            this.state = 495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 486;
	                this.match(CycloneParser.HAT);
	                this.state = 487;
	                this.match(CycloneParser.LBRACE);
	                this.state = 488;
	                this.intLiteral();
	                this.state = 491;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 489;
	                    this.match(CycloneParser.COLON);
	                    this.state = 490;
	                    this.intLiteral();
	                }

	                this.state = 493;
	                this.match(CycloneParser.RBRACE);
	            }

	            this.state = 497;
	            this.match(CycloneParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimaryExpr() {
	    let localctx = new PathPrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CycloneParser.RULE_pathPrimaryExpr);
	    var _la = 0;
	    try {
	        this.state = 603;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 516;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 111:
	                this.state = 501;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 502;
	                this.pathOp();
	                this.state = 514;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 503;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 504;
	                    this.identifier();
	                    this.state = 509;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 505;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 506;
	                        this.identifier();
	                        this.state = 511;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 512;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 536; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 518;
	                this.match(CycloneParser.ARROW);
	                this.state = 534;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 111:
	                    this.state = 519;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 520;
	                    this.pathOp();
	                    this.state = 532;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 521;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 522;
	                        this.identifier();
	                        this.state = 527;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 523;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 524;
	                            this.identifier();
	                            this.state = 529;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 530;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 538; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            break;
	        case 19:
	        case 44:
	        case 45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 548;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 44:
	            	this.state = 540;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 542;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 541;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 45:
	            	this.state = 544;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 546;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 545;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 550;
	            this.match(CycloneParser.LPAREN);
	            this.state = 566;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 111:
	                this.state = 551;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 552;
	                this.pathOp();
	                this.state = 564;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 553;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 554;
	                    this.identifier();
	                    this.state = 559;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 555;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 556;
	                        this.identifier();
	                        this.state = 561;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 562;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 586; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 568;
	                this.match(CycloneParser.ARROW);
	                this.state = 584;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 111:
	                    this.state = 569;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 570;
	                    this.pathOp();
	                    this.state = 582;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 571;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 572;
	                        this.identifier();
	                        this.state = 577;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 573;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 574;
	                            this.identifier();
	                            this.state = 579;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 580;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 588; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            this.state = 590;
	            this.match(CycloneParser.RPAREN);
	            this.state = 601;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            if(la_===1) {
	                this.state = 591;
	                this.match(CycloneParser.HAT);
	                this.state = 592;
	                this.match(CycloneParser.LBRACE);
	                this.state = 593;
	                this.intLiteral();
	                this.state = 597;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 595;
	                    this.match(CycloneParser.COLON);
	                    this.state = 596;
	                    this.intLiteral();
	                }

	                this.state = 599;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOp() {
	    let localctx = new PathOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CycloneParser.RULE_pathOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this.match(CycloneParser.P_OP_ONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CycloneParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateModifier() {
	    let localctx = new StateModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CycloneParser.RULE_stateModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        _la = this._input.LA(1);
	        if(!(((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CycloneParser.RULE_literal);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.intLiteral();
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.realLiteral();
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 613;
	            this.boolLiteral();
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 614;
	            this.stringLiteral();
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 615;
	            this.charLiteral();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 616;
	            this.enumLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intLiteral() {
	    let localctx = new IntLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CycloneParser.RULE_intLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this.match(CycloneParser.INTLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realLiteral() {
	    let localctx = new RealLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CycloneParser.RULE_realLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.match(CycloneParser.REALLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CycloneParser.RULE_boolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 623;
	        this.match(CycloneParser.BOOLLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CycloneParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLiteral() {
	    let localctx = new CharLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CycloneParser.RULE_charLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 627;
	        this.match(CycloneParser.CHARLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumLiteral() {
	    let localctx = new EnumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CycloneParser.RULE_enumLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(CycloneParser.ENUMLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record() {
	    let localctx = new RecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CycloneParser.RULE_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(CycloneParser.RECORD);
	        this.state = 632;
	        this.identifier();
	        this.state = 633;
	        this.recordScope();
	        this.state = 634;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordScope() {
	    let localctx = new RecordScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CycloneParser.RULE_recordScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.match(CycloneParser.LBRACE);
	        this.state = 637;
	        this.recordVariableDeclGroup();
	        this.state = 638;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDeclGroup() {
	    let localctx = new RecordVariableDeclGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CycloneParser.RULE_recordVariableDeclGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 640;
	            this.recordVariableDecl();
	            this.state = 643; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 55) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDecl() {
	    let localctx = new RecordVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CycloneParser.RULE_recordVariableDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.type();
	        this.state = 646;
	        this.variableDeclarator();
	        this.state = 647;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantGroup() {
	    let localctx = new GlobalConstantGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CycloneParser.RULE_globalConstantGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.match(CycloneParser.CONST);
	        this.state = 650;
	        this.type();
	        this.state = 651;
	        this.globalConstantDecl();
	        this.state = 656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 652;
	            this.match(CycloneParser.COMMA);
	            this.state = 653;
	            this.globalConstantDecl();
	            this.state = 658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 659;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantDecl() {
	    let localctx = new GlobalConstantDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CycloneParser.RULE_globalConstantDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.identifier();
	        this.state = 662;
	        this.match(CycloneParser.EQUAL);
	        this.state = 663;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalVariableGroup() {
	    let localctx = new GlobalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CycloneParser.RULE_globalVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.type();
	        this.state = 666;
	        this.variableDeclarator();
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 667;
	            this.match(CycloneParser.COMMA);
	            this.state = 668;
	            this.variableDeclarator();
	            this.state = 673;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 674;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableGroup() {
	    let localctx = new LocalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CycloneParser.RULE_localVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.type();
	        this.state = 677;
	        this.variableDeclarator();
	        this.state = 682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 678;
	            this.match(CycloneParser.COMMA);
	            this.state = 679;
	            this.variableDeclarator();
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 685;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CycloneParser.RULE_modifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        _la = this._input.LA(1);
	        if(!(_la===47 || _la===48)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CycloneParser.RULE_type);
	    try {
	        this.state = 691;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 69:
	        case 70:
	        case 72:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 689;
	            this.primitiveType();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 690;
	            this.enumType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CycloneParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        _la = this._input.LA(1);
	        if(!(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 23) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CycloneParser.RULE_enumType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this.match(CycloneParser.ENUM);
	        this.state = 696;
	        this.match(CycloneParser.LBRACE);
	        this.state = 697;
	        this.enumDecl();
	        this.state = 702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 698;
	            this.match(CycloneParser.COMMA);
	            this.state = 699;
	            this.enumDecl();
	            this.state = 704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 705;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDecl() {
	    let localctx = new EnumDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CycloneParser.RULE_enumDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CycloneParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.identifier();
	        this.state = 712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 710;
	            this.match(CycloneParser.EQUAL);
	            this.state = 711;
	            this.variableInitializer();
	        }

	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 714;
	            this.whereExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereExpr() {
	    let localctx = new WhereExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CycloneParser.RULE_whereExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.match(CycloneParser.WHERE);
	        this.state = 718;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CycloneParser.RULE_variableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertExpr() {
	    let localctx = new AssertExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CycloneParser.RULE_assertExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 722;
	            this.annotationExpr();
	        }

	        this.state = 725;
	        this.match(CycloneParser.ASSERT);
	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97 || _la===98) {
	            this.state = 726;
	            _la = this._input.LA(1);
	            if(!(_la===97 || _la===98)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 729;
	        this.expression();
	        this.state = 731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 730;
	            this.inExpr();
	        }

	        this.state = 733;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CycloneParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.expression();
	        this.state = 736;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CycloneParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 738;
	        this.conditionalImpliesExpression();
	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 739;
	            _la = this._input.LA(1);
	            if(!(_la===11 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 740;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalImpliesExpression() {
	    let localctx = new ConditionalImpliesExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CycloneParser.RULE_conditionalImpliesExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.conditionalOrExpression();
	        this.state = 748;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 744;
	                this.match(CycloneParser.IMPLIES);
	                this.state = 745;
	                this.conditionalOrExpression(); 
	            }
	            this.state = 750;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CycloneParser.RULE_conditionalOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.conditionalAndExpression();
	        this.state = 756;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 752;
	                this.match(CycloneParser.OR);
	                this.state = 753;
	                this.conditionalAndExpression(); 
	            }
	            this.state = 758;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CycloneParser.RULE_conditionalAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.conditionalXorExpression();
	        this.state = 764;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 760;
	                this.match(CycloneParser.AND);
	                this.state = 761;
	                this.conditionalXorExpression(); 
	            }
	            this.state = 766;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalXorExpression() {
	    let localctx = new ConditionalXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CycloneParser.RULE_conditionalXorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.equalityExpression();
	        this.state = 772;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 768;
	                this.match(CycloneParser.HAT);
	                this.state = 769;
	                this.equalityExpression(); 
	            }
	            this.state = 774;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CycloneParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.relationalExpression();
	        this.state = 780;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 776;
	                _la = this._input.LA(1);
	                if(!(_la===21 || _la===46)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 777;
	                this.relationalExpression(); 
	            }
	            this.state = 782;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CycloneParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        this.additiveExpression();
	        this.state = 788;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 784;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 405504) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 785;
	                this.additiveExpression(); 
	            }
	            this.state = 790;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CycloneParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.multiplicativeExpression();
	        this.state = 796;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 792;
	                _la = this._input.LA(1);
	                if(!(_la===20 || _la===28)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 793;
	                this.multiplicativeExpression(); 
	            }
	            this.state = 798;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CycloneParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 799;
	        this.powExpression();
	        this.state = 804;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 800;
	                _la = this._input.LA(1);
	                if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 2051) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 801;
	                this.powExpression(); 
	            }
	            this.state = 806;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powExpression() {
	    let localctx = new PowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CycloneParser.RULE_powExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.unaryExpression();
	        this.state = 812;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 808;
	                this.match(CycloneParser.TIMES_TIMES);
	                this.state = 809;
	                this.unaryExpression(); 
	            }
	            this.state = 814;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CycloneParser.RULE_unaryExpression);
	    try {
	        this.state = 820;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 815;
	            this.match(CycloneParser.PLUS);
	            this.state = 816;
	            this.unaryExpression();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 817;
	            this.match(CycloneParser.MINUS);
	            this.state = 818;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 31:
	        case 93:
	        case 95:
	        case 99:
	        case 102:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 819;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CycloneParser.RULE_unaryExpressionNotPlusMinus);
	    var _la = 0;
	    try {
	        this.state = 828;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 822;
	            this.match(CycloneParser.NOT);
	            this.state = 823;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 93:
	        case 95:
	        case 99:
	        case 102:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 824;
	            this.primary();
	            this.state = 826;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 825;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===35)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneExpr() {
	    let localctx = new OneExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CycloneParser.RULE_oneExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this.match(CycloneParser.ONE);
	        this.state = 831;
	        this.match(CycloneParser.LPAREN);
	        this.state = 834; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 832;
	            this.match(CycloneParser.COMMA);
	            this.state = 833;
	            this.expression();
	            this.state = 836; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===8);
	        this.state = 838;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freshExpr() {
	    let localctx = new FreshExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CycloneParser.RULE_freshExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.match(CycloneParser.FRESH);
	        this.state = 841;
	        this.match(CycloneParser.LPAREN);
	        this.state = 842;
	        this.identifier();
	        this.state = 843;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialExpr() {
	    let localctx = new InitialExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CycloneParser.RULE_initialExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.match(CycloneParser.INITIAL);
	        this.state = 846;
	        this.match(CycloneParser.LPAREN);
	        this.state = 847;
	        this.dotIdentifierExpr();
	        this.state = 848;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CycloneParser.RULE_functionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.match(CycloneParser.FUNCTION);

	        this.state = 851;
	        this.identifier();
	        this.state = 852;
	        this.match(CycloneParser.COLON);
	        this.state = 853;
	        this.primitiveType();
	        this.state = 854;
	        this.functionBodyScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBodyScope() {
	    let localctx = new FunctionBodyScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CycloneParser.RULE_functionBodyScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.functionParamsDecl();
	        this.state = 857;
	        this.match(CycloneParser.LBRACE);
	        this.state = 861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 55) !== 0)) {
	            this.state = 858;
	            this.localVariableGroup();
	            this.state = 863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 865; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 864;
	            this.statement();
	            this.state = 867; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2417491968) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 520773) !== 0));
	        this.state = 869;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParamsDecl() {
	    let localctx = new FunctionParamsDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CycloneParser.RULE_functionParamsDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(CycloneParser.LPAREN);
	        this.state = 876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 872;
	            this.identifier();
	            this.state = 873;
	            this.match(CycloneParser.COLON);
	            this.state = 874;
	            this.primitiveType();
	        }

	        this.state = 885;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 878;
	            this.match(CycloneParser.COMMA);
	            this.state = 879;
	            this.identifier();
	            this.state = 880;
	            this.match(CycloneParser.COLON);
	            this.state = 881;
	            this.primitiveType();
	            this.state = 887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 888;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnExpr() {
	    let localctx = new ReturnExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CycloneParser.RULE_returnExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 890;
	        this.match(CycloneParser.RETURN);
	        this.state = 891;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CycloneParser.RULE_primary);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.parExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.dotIdentifierExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 895;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 896;
	            this.initialExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 897;
	            this.freshExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 898;
	            this.oneExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 899;
	            this.returnExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 900;
	            this.funCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifierExpr() {
	    let localctx = new DotIdentifierExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CycloneParser.RULE_dotIdentifierExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.identifier();
	        this.state = 906;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 904;
	            this.match(CycloneParser.DOT);
	            this.state = 905;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CycloneParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(CycloneParser.LPAREN);
	        this.state = 909;
	        this.expression();
	        this.state = 910;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funCall() {
	    let localctx = new FunCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CycloneParser.RULE_funCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 912;
	        this.identifier();
	        this.state = 913;
	        this.match(CycloneParser.LPAREN);
	        this.state = 914;
	        this.expression();
	        this.state = 919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 915;
	            this.match(CycloneParser.COMMA);
	            this.state = 916;
	            this.expression();
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 922;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteStatement() {
	    let localctx = new IteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CycloneParser.RULE_iteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 924;
	        this.match(CycloneParser.IF);
	        this.state = 925;
	        this.parExpression();
	        this.state = 926;
	        this.statement();
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===104) {
	            this.state = 927;
	            this.match(CycloneParser.ELSE);
	            this.state = 928;
	            this.statement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationExpr() {
	    let localctx = new AnnotationExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CycloneParser.RULE_annotationExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 931;
	        this.match(CycloneParser.AT_SIGN);
	        this.state = 932;
	        this.match(CycloneParser.LABEL);
	        this.state = 933;
	        this.match(CycloneParser.COLON);
	        this.state = 934;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CycloneParser.EOF = antlr4.Token.EOF;
CycloneParser.ARROW = 1;
CycloneParser.BI_ARROW = 2;
CycloneParser.AT_SIGN = 3;
CycloneParser.BAR = 4;
CycloneParser.COLON = 5;
CycloneParser.COLON_COLON = 6;
CycloneParser.COLON_EQUAL = 7;
CycloneParser.COMMA = 8;
CycloneParser.DOT = 9;
CycloneParser.DOTDOT = 10;
CycloneParser.EQUAL = 11;
CycloneParser.GREATER = 12;
CycloneParser.GREATER_EQUAL = 13;
CycloneParser.HASH = 14;
CycloneParser.LBRACE = 15;
CycloneParser.LBRACK = 16;
CycloneParser.LESS = 17;
CycloneParser.LESS_EQUAL = 18;
CycloneParser.LPAREN = 19;
CycloneParser.MINUS = 20;
CycloneParser.NOT_EQUAL = 21;
CycloneParser.RBRACE = 22;
CycloneParser.RBRACK = 23;
CycloneParser.RPAREN = 24;
CycloneParser.SEMI = 25;
CycloneParser.SLASH = 26;
CycloneParser.STAR = 27;
CycloneParser.PLUS = 28;
CycloneParser.XOR = 29;
CycloneParser.IMPLIES = 30;
CycloneParser.NOT = 31;
CycloneParser.HAT = 32;
CycloneParser.P_OP_ONE = 33;
CycloneParser.PLUS_PLUS = 34;
CycloneParser.MINUS_MINUS = 35;
CycloneParser.TIMES_TIMES = 36;
CycloneParser.MOD = 37;
CycloneParser.OR = 38;
CycloneParser.AND = 39;
CycloneParser.ASSIGN_PLUS_EQ = 40;
CycloneParser.ASSIGN_MINUS_EQ = 41;
CycloneParser.ASSIGN_TIMES_EQ = 42;
CycloneParser.ASSIGN_DIV_EQ = 43;
CycloneParser.SHIFT_LEFT = 44;
CycloneParser.SHIFT_RIGHT = 45;
CycloneParser.DOUBLE_EQUAL = 46;
CycloneParser.GLOBAL = 47;
CycloneParser.NATIVE = 48;
CycloneParser.DEBUG = 49;
CycloneParser.LOG = 50;
CycloneParser.OUTPUT = 51;
CycloneParser.TRACE = 52;
CycloneParser.PRECISION = 53;
CycloneParser.TIMEOUT = 54;
CycloneParser.DETECT = 55;
CycloneParser.STATE = 56;
CycloneParser.NODE = 57;
CycloneParser.MACHINE = 58;
CycloneParser.GRAPH = 59;
CycloneParser.TRANS1 = 60;
CycloneParser.TRANS2 = 61;
CycloneParser.EDGE = 62;
CycloneParser.RECORD = 63;
CycloneParser.CONST = 64;
CycloneParser.ON = 65;
CycloneParser.LABEL = 66;
CycloneParser.INVARIANT = 67;
CycloneParser.INT = 68;
CycloneParser.BOOL = 69;
CycloneParser.REAL = 70;
CycloneParser.CHAR = 71;
CycloneParser.STRING = 72;
CycloneParser.ENUM = 73;
CycloneParser.WHERE = 74;
CycloneParser.START = 75;
CycloneParser.FINAL = 76;
CycloneParser.ABSTRACT = 77;
CycloneParser.NORMAL = 78;
CycloneParser.PREV = 79;
CycloneParser.GOAL = 80;
CycloneParser.CHECK = 81;
CycloneParser.FOR = 82;
CycloneParser.STOP = 83;
CycloneParser.AT = 84;
CycloneParser.VIA = 85;
CycloneParser.CONDITION = 86;
CycloneParser.REACH = 87;
CycloneParser.WITH = 88;
CycloneParser.ENUMERATE = 89;
CycloneParser.LET = 90;
CycloneParser.EACH = 91;
CycloneParser.ASSERT = 92;
CycloneParser.INITIAL = 93;
CycloneParser.IN = 94;
CycloneParser.FRESH = 95;
CycloneParser.OPTION = 96;
CycloneParser.ALWAYS = 97;
CycloneParser.SOME = 98;
CycloneParser.ONE = 99;
CycloneParser.UPTO = 100;
CycloneParser.FUNCTION = 101;
CycloneParser.RETURN = 102;
CycloneParser.IF = 103;
CycloneParser.ELSE = 104;
CycloneParser.INTLITERAL = 105;
CycloneParser.REALLITERAL = 106;
CycloneParser.CHARLITERAL = 107;
CycloneParser.STRINGLITERAL = 108;
CycloneParser.BOOLLITERAL = 109;
CycloneParser.ENUMLITERAL = 110;
CycloneParser.IDENT = 111;
CycloneParser.ML_COMMENT = 112;
CycloneParser.SL_COMMENT = 113;
CycloneParser.WS = 114;

CycloneParser.RULE_identifier = 0;
CycloneParser.RULE_head = 1;
CycloneParser.RULE_compOptions = 2;
CycloneParser.RULE_optionName = 3;
CycloneParser.RULE_machine = 4;
CycloneParser.RULE_machineScope = 5;
CycloneParser.RULE_stateExpr = 6;
CycloneParser.RULE_stateScope = 7;
CycloneParser.RULE_trans = 8;
CycloneParser.RULE_transScope = 9;
CycloneParser.RULE_transOp = 10;
CycloneParser.RULE_transDef = 11;
CycloneParser.RULE_transExclExpr = 12;
CycloneParser.RULE_invariantExpression = 13;
CycloneParser.RULE_inExpr = 14;
CycloneParser.RULE_invariantScope = 15;
CycloneParser.RULE_goal = 16;
CycloneParser.RULE_checkExpr = 17;
CycloneParser.RULE_forExpr = 18;
CycloneParser.RULE_stopExpr = 19;
CycloneParser.RULE_viaExpr = 20;
CycloneParser.RULE_withExpr = 21;
CycloneParser.RULE_letExpr = 22;
CycloneParser.RULE_pathAssignStatement = 23;
CycloneParser.RULE_pathCondAssignExpr = 24;
CycloneParser.RULE_pathExpr = 25;
CycloneParser.RULE_pathCondition = 26;
CycloneParser.RULE_orPathCondition = 27;
CycloneParser.RULE_andPathCondition = 28;
CycloneParser.RULE_xorPathCondition = 29;
CycloneParser.RULE_unaryPathCondition = 30;
CycloneParser.RULE_primaryCondition = 31;
CycloneParser.RULE_parPathCondition = 32;
CycloneParser.RULE_stateIncExpr = 33;
CycloneParser.RULE_pathPrimaryExpr = 34;
CycloneParser.RULE_pathOp = 35;
CycloneParser.RULE_label = 36;
CycloneParser.RULE_stateModifier = 37;
CycloneParser.RULE_literal = 38;
CycloneParser.RULE_intLiteral = 39;
CycloneParser.RULE_realLiteral = 40;
CycloneParser.RULE_boolLiteral = 41;
CycloneParser.RULE_stringLiteral = 42;
CycloneParser.RULE_charLiteral = 43;
CycloneParser.RULE_enumLiteral = 44;
CycloneParser.RULE_record = 45;
CycloneParser.RULE_recordScope = 46;
CycloneParser.RULE_recordVariableDeclGroup = 47;
CycloneParser.RULE_recordVariableDecl = 48;
CycloneParser.RULE_globalConstantGroup = 49;
CycloneParser.RULE_globalConstantDecl = 50;
CycloneParser.RULE_globalVariableGroup = 51;
CycloneParser.RULE_localVariableGroup = 52;
CycloneParser.RULE_modifier = 53;
CycloneParser.RULE_type = 54;
CycloneParser.RULE_primitiveType = 55;
CycloneParser.RULE_enumType = 56;
CycloneParser.RULE_enumDecl = 57;
CycloneParser.RULE_variableDeclarator = 58;
CycloneParser.RULE_whereExpr = 59;
CycloneParser.RULE_variableInitializer = 60;
CycloneParser.RULE_assertExpr = 61;
CycloneParser.RULE_statement = 62;
CycloneParser.RULE_expression = 63;
CycloneParser.RULE_conditionalImpliesExpression = 64;
CycloneParser.RULE_conditionalOrExpression = 65;
CycloneParser.RULE_conditionalAndExpression = 66;
CycloneParser.RULE_conditionalXorExpression = 67;
CycloneParser.RULE_equalityExpression = 68;
CycloneParser.RULE_relationalExpression = 69;
CycloneParser.RULE_additiveExpression = 70;
CycloneParser.RULE_multiplicativeExpression = 71;
CycloneParser.RULE_powExpression = 72;
CycloneParser.RULE_unaryExpression = 73;
CycloneParser.RULE_unaryExpressionNotPlusMinus = 74;
CycloneParser.RULE_oneExpr = 75;
CycloneParser.RULE_freshExpr = 76;
CycloneParser.RULE_initialExpr = 77;
CycloneParser.RULE_functionDeclaration = 78;
CycloneParser.RULE_functionBodyScope = 79;
CycloneParser.RULE_functionParamsDecl = 80;
CycloneParser.RULE_returnExpr = 81;
CycloneParser.RULE_primary = 82;
CycloneParser.RULE_dotIdentifierExpr = 83;
CycloneParser.RULE_parExpression = 84;
CycloneParser.RULE_funCall = 85;
CycloneParser.RULE_iteStatement = 86;
CycloneParser.RULE_annotationExpr = 87;

class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_identifier;
    }

	IDENT() {
	    return this.getToken(CycloneParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class HeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_head;
    }

	compOptions() {
	    return this.getTypedRuleContext(CompOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitHead(this);
		}
	}


}



class CompOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_compOptions;
    }

	OPTION() {
	    return this.getToken(CycloneParser.OPTION, 0);
	};

	optionName() {
	    return this.getTypedRuleContext(OptionNameContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCompOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCompOptions(this);
		}
	}


}



class OptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_optionName;
    }

	DEBUG() {
	    return this.getToken(CycloneParser.DEBUG, 0);
	};

	LOG() {
	    return this.getToken(CycloneParser.LOG, 0);
	};

	OUTPUT() {
	    return this.getToken(CycloneParser.OUTPUT, 0);
	};

	TRACE() {
	    return this.getToken(CycloneParser.TRACE, 0);
	};

	PRECISION() {
	    return this.getToken(CycloneParser.PRECISION, 0);
	};

	TIMEOUT() {
	    return this.getToken(CycloneParser.TIMEOUT, 0);
	};

	DETECT() {
	    return this.getToken(CycloneParser.DETECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOptionName(this);
		}
	}


}



class MachineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machine;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	machineScope() {
	    return this.getTypedRuleContext(MachineScopeContext,0);
	};

	EOF() {
	    return this.getToken(CycloneParser.EOF, 0);
	};

	MACHINE() {
	    return this.getToken(CycloneParser.MACHINE, 0);
	};

	GRAPH() {
	    return this.getToken(CycloneParser.GRAPH, 0);
	};

	compOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompOptionsContext);
	    } else {
	        return this.getTypedRuleContext(CompOptionsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachine(this);
		}
	}


}



class MachineScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	stateExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateExprContext);
	    } else {
	        return this.getTypedRuleContext(StateExprContext,i);
	    }
	};

	trans = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransContext);
	    } else {
	        return this.getTypedRuleContext(TransContext,i);
	    }
	};

	invariantExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InvariantExpressionContext,i);
	    }
	};

	goal() {
	    return this.getTypedRuleContext(GoalContext,0);
	};

	globalVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalVariableGroupContext,i);
	    }
	};

	globalConstantGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantGroupContext,i);
	    }
	};

	record = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordContext);
	    } else {
	        return this.getTypedRuleContext(RecordContext,i);
	    }
	};

	functionDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineScope(this);
		}
	}


}



class StateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	stateScope() {
	    return this.getTypedRuleContext(StateScopeContext,0);
	};

	STATE() {
	    return this.getToken(CycloneParser.STATE, 0);
	};

	NODE() {
	    return this.getToken(CycloneParser.NODE, 0);
	};

	stateModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateModifierContext);
	    } else {
	        return this.getTypedRuleContext(StateModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateExpr(this);
		}
	}


}



class StateScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateScope(this);
		}
	}


}



class TransContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_trans;
    }

	transScope() {
	    return this.getTypedRuleContext(TransScopeContext,0);
	};

	TRANS1() {
	    return this.getToken(CycloneParser.TRANS1, 0);
	};

	TRANS2() {
	    return this.getToken(CycloneParser.TRANS2, 0);
	};

	EDGE() {
	    return this.getToken(CycloneParser.EDGE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTrans(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTrans(this);
		}
	}


}



class TransScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	transOp() {
	    return this.getTypedRuleContext(TransOpContext,0);
	};

	transDef() {
	    return this.getTypedRuleContext(TransDefContext,0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	ON() {
	    return this.getToken(CycloneParser.ON, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransScope(this);
		}
	}


}



class TransOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transOp;
    }

	ARROW() {
	    return this.getToken(CycloneParser.ARROW, 0);
	};

	BI_ARROW() {
	    return this.getToken(CycloneParser.BI_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransOp(this);
		}
	}


}



class TransDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transDef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(CycloneParser.STAR, 0);
	};

	transExclExpr() {
	    return this.getTypedRuleContext(TransExclExprContext,0);
	};

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransDef(this);
		}
	}


}



class TransExclExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transExclExpr;
    }

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransExclExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransExclExpr(this);
		}
	}


}



class InvariantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantExpression;
    }

	INVARIANT() {
	    return this.getToken(CycloneParser.INVARIANT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	invariantScope() {
	    return this.getTypedRuleContext(InvariantScopeContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantExpression(this);
		}
	}


}



class InExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_inExpr;
    }

	IN() {
	    return this.getToken(CycloneParser.IN, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInExpr(this);
		}
	}


}



class InvariantScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantScope(this);
		}
	}


}



class GoalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_goal;
    }

	GOAL() {
	    return this.getToken(CycloneParser.GOAL, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	checkExpr() {
	    return this.getTypedRuleContext(CheckExprContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	letExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetExprContext);
	    } else {
	        return this.getTypedRuleContext(LetExprContext,i);
	    }
	};

	pathAssignStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathAssignStatementContext);
	    } else {
	        return this.getTypedRuleContext(PathAssignStatementContext,i);
	    }
	};

	assertExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertExprContext);
	    } else {
	        return this.getTypedRuleContext(AssertExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGoal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGoal(this);
		}
	}


}



class CheckExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_checkExpr;
    }

	forExpr() {
	    return this.getTypedRuleContext(ForExprContext,0);
	};

	CHECK() {
	    return this.getToken(CycloneParser.CHECK, 0);
	};

	ENUMERATE() {
	    return this.getToken(CycloneParser.ENUMERATE, 0);
	};

	viaExpr() {
	    return this.getTypedRuleContext(ViaExprContext,0);
	};

	withExpr() {
	    return this.getTypedRuleContext(WithExprContext,0);
	};

	stopExpr() {
	    return this.getTypedRuleContext(StopExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCheckExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCheckExpr(this);
		}
	}


}



class ForExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_forExpr;
    }

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(CycloneParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(CycloneParser.EACH, 0);
	};

	UPTO() {
	    return this.getToken(CycloneParser.UPTO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterForExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitForExpr(this);
		}
	}


}



class StopExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stopExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	REACH() {
	    return this.getToken(CycloneParser.REACH, 0);
	};

	STOP() {
	    return this.getToken(CycloneParser.STOP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStopExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStopExpr(this);
		}
	}


}



class ViaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_viaExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	VIA() {
	    return this.getToken(CycloneParser.VIA, 0);
	};

	CONDITION() {
	    return this.getToken(CycloneParser.CONDITION, 0);
	};

	pathExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprContext);
	    } else {
	        return this.getTypedRuleContext(PathExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterViaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitViaExpr(this);
		}
	}


}



class WithExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_withExpr;
    }

	WITH() {
	    return this.getToken(CycloneParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWithExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWithExpr(this);
		}
	}


}



class LetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_letExpr;
    }

	LET() {
	    return this.getToken(CycloneParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLetExpr(this);
		}
	}


}



class PathAssignStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathAssignStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathAssignStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathAssignStatement(this);
		}
	}


}



class PathCondAssignExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondAssignExpr;
    }

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondAssignExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondAssignExpr(this);
		}
	}


}



class PathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExpr;
    }

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExpr(this);
		}
	}


}



class PathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondition;
    }

	orPathCondition() {
	    return this.getTypedRuleContext(OrPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondition(this);
		}
	}


}



class OrPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_orPathCondition;
    }

	andPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(AndPathConditionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOrPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOrPathCondition(this);
		}
	}


}



class AndPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_andPathCondition;
    }

	xorPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(XorPathConditionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAndPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAndPathCondition(this);
		}
	}


}



class XorPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_xorPathCondition;
    }

	unaryPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryPathConditionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterXorPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitXorPathCondition(this);
		}
	}


}



class UnaryPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryPathCondition;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryPathCondition() {
	    return this.getTypedRuleContext(UnaryPathConditionContext,0);
	};

	primaryCondition() {
	    return this.getTypedRuleContext(PrimaryConditionContext,0);
	};

	parPathCondition() {
	    return this.getTypedRuleContext(ParPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryPathCondition(this);
		}
	}


}



class PrimaryConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primaryCondition;
    }

	stateIncExpr() {
	    return this.getTypedRuleContext(StateIncExprContext,0);
	};

	pathPrimaryExpr() {
	    return this.getTypedRuleContext(PathPrimaryExprContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimaryCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimaryCondition(this);
		}
	}


}



class ParPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parPathCondition;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParPathCondition(this);
		}
	}


}



class StateIncExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateIncExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateIncExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateIncExpr(this);
		}
	}


}



class PathPrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathPrimaryExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	pathOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOpContext);
	    } else {
	        return this.getTypedRuleContext(PathOpContext,i);
	    }
	};

	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.ARROW);
	    } else {
	        return this.getToken(CycloneParser.ARROW, i);
	    }
	};


	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LBRACK);
	    } else {
	        return this.getToken(CycloneParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.RBRACK);
	    } else {
	        return this.getToken(CycloneParser.RBRACK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathPrimaryExpr(this);
		}
	}


}



class PathOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathOp;
    }

	P_OP_ONE() {
	    return this.getToken(CycloneParser.P_OP_ONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathOp(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_label;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLabel(this);
		}
	}


}



class StateModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateModifier;
    }

	START() {
	    return this.getToken(CycloneParser.START, 0);
	};

	FINAL() {
	    return this.getToken(CycloneParser.FINAL, 0);
	};

	ABSTRACT() {
	    return this.getToken(CycloneParser.ABSTRACT, 0);
	};

	NORMAL() {
	    return this.getToken(CycloneParser.NORMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateModifier(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_literal;
    }

	intLiteral() {
	    return this.getTypedRuleContext(IntLiteralContext,0);
	};

	realLiteral() {
	    return this.getTypedRuleContext(RealLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	charLiteral() {
	    return this.getTypedRuleContext(CharLiteralContext,0);
	};

	enumLiteral() {
	    return this.getTypedRuleContext(EnumLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class IntLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_intLiteral;
    }

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIntLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIntLiteral(this);
		}
	}


}



class RealLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_realLiteral;
    }

	REALLITERAL() {
	    return this.getToken(CycloneParser.REALLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRealLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRealLiteral(this);
		}
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_boolLiteral;
    }

	BOOLLITERAL() {
	    return this.getToken(CycloneParser.BOOLLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBoolLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stringLiteral;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class CharLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_charLiteral;
    }

	CHARLITERAL() {
	    return this.getToken(CycloneParser.CHARLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCharLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCharLiteral(this);
		}
	}


}



class EnumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumLiteral;
    }

	ENUMLITERAL() {
	    return this.getToken(CycloneParser.ENUMLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumLiteral(this);
		}
	}


}



class RecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_record;
    }

	RECORD() {
	    return this.getToken(CycloneParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordScope() {
	    return this.getTypedRuleContext(RecordScopeContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecord(this);
		}
	}


}



class RecordScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	recordVariableDeclGroup() {
	    return this.getTypedRuleContext(RecordVariableDeclGroupContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordScope(this);
		}
	}


}



class RecordVariableDeclGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDeclGroup;
    }

	recordVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(RecordVariableDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDeclGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDeclGroup(this);
		}
	}


}



class RecordVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator() {
	    return this.getTypedRuleContext(VariableDeclaratorContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDecl(this);
		}
	}


}



class GlobalConstantGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantGroup;
    }

	CONST() {
	    return this.getToken(CycloneParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	globalConstantDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantDeclContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantDeclContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantGroup(this);
		}
	}


}



class GlobalConstantDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantDecl(this);
		}
	}


}



class GlobalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalVariableGroup(this);
		}
	}


}



class LocalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_localVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLocalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLocalVariableGroup(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_modifier;
    }

	GLOBAL() {
	    return this.getToken(CycloneParser.GLOBAL, 0);
	};

	NATIVE() {
	    return this.getToken(CycloneParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitModifier(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveType;
    }

	INT() {
	    return this.getToken(CycloneParser.INT, 0);
	};

	BOOL() {
	    return this.getToken(CycloneParser.BOOL, 0);
	};

	REAL() {
	    return this.getToken(CycloneParser.REAL, 0);
	};

	STRING() {
	    return this.getToken(CycloneParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumType;
    }

	ENUM() {
	    return this.getToken(CycloneParser.ENUM, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	enumDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumDeclContext);
	    } else {
	        return this.getTypedRuleContext(EnumDeclContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumType(this);
		}
	}


}



class EnumDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumDecl(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class WhereExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_whereExpr;
    }

	WHERE() {
	    return this.getToken(CycloneParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWhereExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWhereExpr(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class AssertExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertExpr;
    }

	ASSERT() {
	    return this.getToken(CycloneParser.ASSERT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	annotationExpr() {
	    return this.getTypedRuleContext(AnnotationExprContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	ALWAYS() {
	    return this.getToken(CycloneParser.ALWAYS, 0);
	};

	SOME() {
	    return this.getToken(CycloneParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertExpr(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_expression;
    }

	conditionalImpliesExpression() {
	    return this.getTypedRuleContext(ConditionalImpliesExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	ASSIGN_PLUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_PLUS_EQ, 0);
	};

	ASSIGN_MINUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_MINUS_EQ, 0);
	};

	ASSIGN_TIMES_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_TIMES_EQ, 0);
	};

	ASSIGN_DIV_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_DIV_EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalImpliesExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalImpliesExpression;
    }

	conditionalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExpressionContext,i);
	    }
	};

	IMPLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.IMPLIES);
	    } else {
	        return this.getToken(CycloneParser.IMPLIES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalImpliesExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalImpliesExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalAndExpression;
    }

	conditionalXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalXorExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class ConditionalXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalXorExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalXorExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	DOUBLE_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.DOUBLE_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.DOUBLE_EQUAL, i);
	    }
	};


	NOT_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.NOT_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.NOT_EQUAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_relationalExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	LESS_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.LESS_EQUAL, i);
	    }
	};


	GREATER_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.GREATER_EQUAL, i);
	    }
	};


	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS);
	    } else {
	        return this.getToken(CycloneParser.LESS, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER);
	    } else {
	        return this.getToken(CycloneParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.PLUS);
	    } else {
	        return this.getToken(CycloneParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MINUS);
	    } else {
	        return this.getToken(CycloneParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_multiplicativeExpression;
    }

	powExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.STAR);
	    } else {
	        return this.getToken(CycloneParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SLASH);
	    } else {
	        return this.getToken(CycloneParser.SLASH, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MOD);
	    } else {
	        return this.getToken(CycloneParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class PowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_powExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	TIMES_TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.TIMES_TIMES);
	    } else {
	        return this.getToken(CycloneParser.TIMES_TIMES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPowExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpression;
    }

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(CycloneParser.MINUS, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpressionNotPlusMinus;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	MINUS_MINUS() {
	    return this.getToken(CycloneParser.MINUS_MINUS, 0);
	};

	PLUS_PLUS() {
	    return this.getToken(CycloneParser.PLUS_PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}


}



class OneExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_oneExpr;
    }

	ONE() {
	    return this.getToken(CycloneParser.ONE, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOneExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOneExpr(this);
		}
	}


}



class FreshExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_freshExpr;
    }

	FRESH() {
	    return this.getToken(CycloneParser.FRESH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFreshExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFreshExpr(this);
		}
	}


}



class InitialExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_initialExpr;
    }

	INITIAL() {
	    return this.getToken(CycloneParser.INITIAL, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInitialExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInitialExpr(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionDeclaration;
    }

	FUNCTION() {
	    return this.getToken(CycloneParser.FUNCTION, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	functionBodyScope() {
	    return this.getTypedRuleContext(FunctionBodyScopeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class FunctionBodyScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionBodyScope;
    }

	functionParamsDecl() {
	    return this.getTypedRuleContext(FunctionParamsDeclContext,0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	localVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(LocalVariableGroupContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionBodyScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionBodyScope(this);
		}
	}


}



class FunctionParamsDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParamsDecl;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COLON);
	    } else {
	        return this.getToken(CycloneParser.COLON, i);
	    }
	};


	primitiveType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimitiveTypeContext);
	    } else {
	        return this.getTypedRuleContext(PrimitiveTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParamsDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParamsDecl(this);
		}
	}


}



class ReturnExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_returnExpr;
    }

	RETURN() {
	    return this.getToken(CycloneParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterReturnExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitReturnExpr(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primary;
    }

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	initialExpr() {
	    return this.getTypedRuleContext(InitialExprContext,0);
	};

	freshExpr() {
	    return this.getTypedRuleContext(FreshExprContext,0);
	};

	oneExpr() {
	    return this.getTypedRuleContext(OneExprContext,0);
	};

	returnExpr() {
	    return this.getTypedRuleContext(ReturnExprContext,0);
	};

	funCall() {
	    return this.getTypedRuleContext(FunCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class DotIdentifierExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_dotIdentifierExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(CycloneParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterDotIdentifierExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitDotIdentifierExpr(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class FunCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_funCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunCall(this);
		}
	}


}



class IteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_iteStatement;
    }

	IF() {
	    return this.getToken(CycloneParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CycloneParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIteStatement(this);
		}
	}


}



class AnnotationExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_annotationExpr;
    }

	AT_SIGN() {
	    return this.getToken(CycloneParser.AT_SIGN, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAnnotationExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAnnotationExpr(this);
		}
	}


}




CycloneParser.IdentifierContext = IdentifierContext; 
CycloneParser.HeadContext = HeadContext; 
CycloneParser.CompOptionsContext = CompOptionsContext; 
CycloneParser.OptionNameContext = OptionNameContext; 
CycloneParser.MachineContext = MachineContext; 
CycloneParser.MachineScopeContext = MachineScopeContext; 
CycloneParser.StateExprContext = StateExprContext; 
CycloneParser.StateScopeContext = StateScopeContext; 
CycloneParser.TransContext = TransContext; 
CycloneParser.TransScopeContext = TransScopeContext; 
CycloneParser.TransOpContext = TransOpContext; 
CycloneParser.TransDefContext = TransDefContext; 
CycloneParser.TransExclExprContext = TransExclExprContext; 
CycloneParser.InvariantExpressionContext = InvariantExpressionContext; 
CycloneParser.InExprContext = InExprContext; 
CycloneParser.InvariantScopeContext = InvariantScopeContext; 
CycloneParser.GoalContext = GoalContext; 
CycloneParser.CheckExprContext = CheckExprContext; 
CycloneParser.ForExprContext = ForExprContext; 
CycloneParser.StopExprContext = StopExprContext; 
CycloneParser.ViaExprContext = ViaExprContext; 
CycloneParser.WithExprContext = WithExprContext; 
CycloneParser.LetExprContext = LetExprContext; 
CycloneParser.PathAssignStatementContext = PathAssignStatementContext; 
CycloneParser.PathCondAssignExprContext = PathCondAssignExprContext; 
CycloneParser.PathExprContext = PathExprContext; 
CycloneParser.PathConditionContext = PathConditionContext; 
CycloneParser.OrPathConditionContext = OrPathConditionContext; 
CycloneParser.AndPathConditionContext = AndPathConditionContext; 
CycloneParser.XorPathConditionContext = XorPathConditionContext; 
CycloneParser.UnaryPathConditionContext = UnaryPathConditionContext; 
CycloneParser.PrimaryConditionContext = PrimaryConditionContext; 
CycloneParser.ParPathConditionContext = ParPathConditionContext; 
CycloneParser.StateIncExprContext = StateIncExprContext; 
CycloneParser.PathPrimaryExprContext = PathPrimaryExprContext; 
CycloneParser.PathOpContext = PathOpContext; 
CycloneParser.LabelContext = LabelContext; 
CycloneParser.StateModifierContext = StateModifierContext; 
CycloneParser.LiteralContext = LiteralContext; 
CycloneParser.IntLiteralContext = IntLiteralContext; 
CycloneParser.RealLiteralContext = RealLiteralContext; 
CycloneParser.BoolLiteralContext = BoolLiteralContext; 
CycloneParser.StringLiteralContext = StringLiteralContext; 
CycloneParser.CharLiteralContext = CharLiteralContext; 
CycloneParser.EnumLiteralContext = EnumLiteralContext; 
CycloneParser.RecordContext = RecordContext; 
CycloneParser.RecordScopeContext = RecordScopeContext; 
CycloneParser.RecordVariableDeclGroupContext = RecordVariableDeclGroupContext; 
CycloneParser.RecordVariableDeclContext = RecordVariableDeclContext; 
CycloneParser.GlobalConstantGroupContext = GlobalConstantGroupContext; 
CycloneParser.GlobalConstantDeclContext = GlobalConstantDeclContext; 
CycloneParser.GlobalVariableGroupContext = GlobalVariableGroupContext; 
CycloneParser.LocalVariableGroupContext = LocalVariableGroupContext; 
CycloneParser.ModifierContext = ModifierContext; 
CycloneParser.TypeContext = TypeContext; 
CycloneParser.PrimitiveTypeContext = PrimitiveTypeContext; 
CycloneParser.EnumTypeContext = EnumTypeContext; 
CycloneParser.EnumDeclContext = EnumDeclContext; 
CycloneParser.VariableDeclaratorContext = VariableDeclaratorContext; 
CycloneParser.WhereExprContext = WhereExprContext; 
CycloneParser.VariableInitializerContext = VariableInitializerContext; 
CycloneParser.AssertExprContext = AssertExprContext; 
CycloneParser.StatementContext = StatementContext; 
CycloneParser.ExpressionContext = ExpressionContext; 
CycloneParser.ConditionalImpliesExpressionContext = ConditionalImpliesExpressionContext; 
CycloneParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
CycloneParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
CycloneParser.ConditionalXorExpressionContext = ConditionalXorExpressionContext; 
CycloneParser.EqualityExpressionContext = EqualityExpressionContext; 
CycloneParser.RelationalExpressionContext = RelationalExpressionContext; 
CycloneParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CycloneParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CycloneParser.PowExpressionContext = PowExpressionContext; 
CycloneParser.UnaryExpressionContext = UnaryExpressionContext; 
CycloneParser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
CycloneParser.OneExprContext = OneExprContext; 
CycloneParser.FreshExprContext = FreshExprContext; 
CycloneParser.InitialExprContext = InitialExprContext; 
CycloneParser.FunctionDeclarationContext = FunctionDeclarationContext; 
CycloneParser.FunctionBodyScopeContext = FunctionBodyScopeContext; 
CycloneParser.FunctionParamsDeclContext = FunctionParamsDeclContext; 
CycloneParser.ReturnExprContext = ReturnExprContext; 
CycloneParser.PrimaryContext = PrimaryContext; 
CycloneParser.DotIdentifierExprContext = DotIdentifierExprContext; 
CycloneParser.ParExpressionContext = ParExpressionContext; 
CycloneParser.FunCallContext = FunCallContext; 
CycloneParser.IteStatementContext = IteStatementContext; 
CycloneParser.AnnotationExprContext = AnnotationExprContext; 
