// Generated from raw/grammar/CycloneParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CycloneParserListener from './CycloneParserListener.js';
const serializedATN = [4,1,114,929,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,0,
1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,5,4,184,8,4,10,4,12,4,187,
9,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,199,8,5,10,5,12,5,202,9,
5,1,5,5,5,205,8,5,10,5,12,5,208,9,5,1,5,5,5,211,8,5,10,5,12,5,214,9,5,1,
5,5,5,217,8,5,10,5,12,5,220,9,5,1,5,3,5,223,8,5,1,5,1,5,1,6,5,6,228,8,6,
10,6,12,6,231,9,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,239,8,7,10,7,12,7,242,9,7,
1,7,1,7,1,8,1,8,3,8,248,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,259,
8,9,1,9,1,9,1,9,3,9,264,8,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,5,11,273,8,
11,10,11,12,11,276,9,11,1,11,1,11,3,11,280,8,11,1,11,1,11,3,11,284,8,11,
3,11,286,8,11,1,12,1,12,1,12,1,12,5,12,292,8,12,10,12,12,12,295,9,12,1,12,
1,12,1,13,1,13,1,13,1,13,3,13,303,8,13,1,14,1,14,1,14,1,14,1,14,5,14,310,
8,14,10,14,12,14,313,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,5,16,329,8,16,10,16,12,16,332,9,16,1,16,1,16,1,16,
1,17,1,17,1,17,3,17,340,8,17,1,17,3,17,343,8,17,1,17,3,17,346,8,17,1,18,
1,18,1,18,1,18,5,18,352,8,18,10,18,12,18,355,9,18,1,19,1,19,1,19,1,19,1,
19,5,19,362,8,19,10,19,12,19,365,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
5,20,374,8,20,10,20,12,20,377,9,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,5,
21,386,8,21,10,21,12,21,389,9,21,1,21,1,21,1,22,1,22,1,22,3,22,396,8,22,
1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,5,26,410,8,26,
10,26,12,26,413,9,26,1,27,1,27,1,27,5,27,418,8,27,10,27,12,27,421,9,27,1,
28,1,28,1,28,5,28,426,8,28,10,28,12,28,429,9,28,1,29,1,29,1,29,1,29,3,29,
435,8,29,1,30,1,30,1,30,3,30,440,8,30,1,31,1,31,1,31,1,31,1,32,1,32,3,32,
448,8,32,1,32,1,32,3,32,452,8,32,3,32,454,8,32,1,32,1,32,1,32,1,32,1,32,
1,32,3,32,462,8,32,1,32,1,32,3,32,466,8,32,1,32,1,32,3,32,470,8,32,1,32,
1,32,3,32,474,8,32,3,32,476,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
485,8,32,1,32,1,32,3,32,489,8,32,1,32,1,32,3,32,493,8,32,1,33,1,33,1,33,
1,33,1,33,1,33,5,33,501,8,33,10,33,12,33,504,9,33,1,33,1,33,3,33,508,8,33,
3,33,510,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,519,8,33,10,33,12,
33,522,9,33,1,33,1,33,3,33,526,8,33,3,33,528,8,33,4,33,530,8,33,11,33,12,
33,531,1,33,1,33,3,33,536,8,33,1,33,1,33,3,33,540,8,33,3,33,542,8,33,1,33,
1,33,1,33,1,33,1,33,1,33,1,33,5,33,551,8,33,10,33,12,33,554,9,33,1,33,1,
33,3,33,558,8,33,3,33,560,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,569,
8,33,10,33,12,33,572,9,33,1,33,1,33,3,33,576,8,33,3,33,578,8,33,4,33,580,
8,33,11,33,12,33,581,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,591,8,33,1,
33,1,33,3,33,595,8,33,3,33,597,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
37,1,37,1,37,1,37,1,37,3,37,611,8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,
46,4,46,635,8,46,11,46,12,46,636,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,5,48,653,8,48,10,48,12,48,656,9,48,1,48,1,
48,1,49,1,49,1,49,1,49,5,49,664,8,49,10,49,12,49,667,9,49,1,49,1,49,1,50,
1,50,1,50,1,50,5,50,675,8,50,10,50,12,50,678,9,50,1,50,1,50,1,51,1,51,1,
52,1,52,3,52,686,8,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,5,54,695,8,54,10,
54,12,54,698,9,54,1,54,1,54,1,55,1,55,1,55,3,55,705,8,55,1,55,3,55,708,8,
55,1,56,1,56,1,56,1,57,1,57,1,58,3,58,716,8,58,1,58,1,58,3,58,720,8,58,1,
58,1,58,3,58,724,8,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,3,60,734,8,
60,1,61,1,61,1,61,5,61,739,8,61,10,61,12,61,742,9,61,1,62,1,62,1,62,5,62,
747,8,62,10,62,12,62,750,9,62,1,63,1,63,1,63,5,63,755,8,63,10,63,12,63,758,
9,63,1,64,1,64,1,64,5,64,763,8,64,10,64,12,64,766,9,64,1,65,1,65,1,65,5,
65,771,8,65,10,65,12,65,774,9,65,1,66,1,66,1,66,5,66,779,8,66,10,66,12,66,
782,9,66,1,67,1,67,1,67,5,67,787,8,67,10,67,12,67,790,9,67,1,68,1,68,1,68,
5,68,795,8,68,10,68,12,68,798,9,68,1,69,1,69,1,69,5,69,803,8,69,10,69,12,
69,806,9,69,1,70,1,70,1,70,1,70,1,70,3,70,813,8,70,1,71,1,71,1,71,1,71,3,
71,819,8,71,3,71,821,8,71,1,72,1,72,1,72,1,72,4,72,827,8,72,11,72,12,72,
828,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,
1,75,1,75,1,75,1,75,1,76,1,76,1,76,5,76,852,8,76,10,76,12,76,855,9,76,1,
76,4,76,858,8,76,11,76,12,76,859,1,76,1,76,1,77,1,77,1,77,1,77,1,77,3,77,
869,8,77,1,77,1,77,1,77,1,77,1,77,5,77,876,8,77,10,77,12,77,879,9,77,1,77,
1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,894,8,79,
1,80,1,80,1,80,3,80,899,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,
5,82,910,8,82,10,82,12,82,913,9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,
83,922,8,83,1,84,1,84,1,84,1,84,1,84,1,84,0,0,85,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,0,20,1,0,49,55,1,0,58,59,1,0,
56,57,1,0,60,62,1,0,65,66,1,0,1,2,2,0,81,81,89,89,3,0,82,82,91,91,100,100,
2,0,83,83,87,87,1,0,85,86,1,0,75,78,1,0,47,48,2,0,68,70,72,72,1,0,97,98,
2,0,11,11,40,43,2,0,21,21,46,46,2,0,12,13,17,18,2,0,20,20,28,28,2,0,26,27,
37,37,1,0,34,35,962,0,170,1,0,0,0,2,172,1,0,0,0,4,174,1,0,0,0,6,180,1,0,
0,0,8,185,1,0,0,0,10,193,1,0,0,0,12,229,1,0,0,0,14,236,1,0,0,0,16,245,1,
0,0,0,18,251,1,0,0,0,20,267,1,0,0,0,22,285,1,0,0,0,24,287,1,0,0,0,26,298,
1,0,0,0,28,304,1,0,0,0,30,316,1,0,0,0,32,320,1,0,0,0,34,336,1,0,0,0,36,347,
1,0,0,0,38,356,1,0,0,0,40,368,1,0,0,0,42,380,1,0,0,0,44,392,1,0,0,0,46,399,
1,0,0,0,48,402,1,0,0,0,50,404,1,0,0,0,52,406,1,0,0,0,54,414,1,0,0,0,56,422,
1,0,0,0,58,434,1,0,0,0,60,439,1,0,0,0,62,441,1,0,0,0,64,492,1,0,0,0,66,596,
1,0,0,0,68,598,1,0,0,0,70,600,1,0,0,0,72,602,1,0,0,0,74,610,1,0,0,0,76,612,
1,0,0,0,78,614,1,0,0,0,80,616,1,0,0,0,82,618,1,0,0,0,84,620,1,0,0,0,86,622,
1,0,0,0,88,624,1,0,0,0,90,629,1,0,0,0,92,634,1,0,0,0,94,638,1,0,0,0,96,642,
1,0,0,0,98,659,1,0,0,0,100,670,1,0,0,0,102,681,1,0,0,0,104,685,1,0,0,0,106,
687,1,0,0,0,108,689,1,0,0,0,110,701,1,0,0,0,112,709,1,0,0,0,114,712,1,0,
0,0,116,715,1,0,0,0,118,727,1,0,0,0,120,730,1,0,0,0,122,735,1,0,0,0,124,
743,1,0,0,0,126,751,1,0,0,0,128,759,1,0,0,0,130,767,1,0,0,0,132,775,1,0,
0,0,134,783,1,0,0,0,136,791,1,0,0,0,138,799,1,0,0,0,140,812,1,0,0,0,142,
820,1,0,0,0,144,822,1,0,0,0,146,832,1,0,0,0,148,837,1,0,0,0,150,842,1,0,
0,0,152,848,1,0,0,0,154,863,1,0,0,0,156,882,1,0,0,0,158,893,1,0,0,0,160,
895,1,0,0,0,162,900,1,0,0,0,164,904,1,0,0,0,166,916,1,0,0,0,168,923,1,0,
0,0,170,171,5,111,0,0,171,1,1,0,0,0,172,173,3,4,2,0,173,3,1,0,0,0,174,175,
5,96,0,0,175,176,3,6,3,0,176,177,5,11,0,0,177,178,3,74,37,0,178,179,5,25,
0,0,179,5,1,0,0,0,180,181,7,0,0,0,181,7,1,0,0,0,182,184,3,4,2,0,183,182,
1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,
187,185,1,0,0,0,188,189,7,1,0,0,189,190,3,0,0,0,190,191,3,10,5,0,191,192,
5,0,0,1,192,9,1,0,0,0,193,200,5,15,0,0,194,199,3,98,49,0,195,199,3,96,48,
0,196,199,3,88,44,0,197,199,3,150,75,0,198,194,1,0,0,0,198,195,1,0,0,0,198,
196,1,0,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,
0,0,201,206,1,0,0,0,202,200,1,0,0,0,203,205,3,12,6,0,204,203,1,0,0,0,205,
208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,212,1,0,0,0,208,206,1,0,
0,0,209,211,3,16,8,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,
213,1,0,0,0,213,218,1,0,0,0,214,212,1,0,0,0,215,217,3,26,13,0,216,215,1,
0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,0,220,
218,1,0,0,0,221,223,3,32,16,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,
0,0,0,224,225,5,22,0,0,225,11,1,0,0,0,226,228,3,72,36,0,227,226,1,0,0,0,
228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,
1,0,0,0,232,233,7,2,0,0,233,234,3,0,0,0,234,235,3,14,7,0,235,13,1,0,0,0,
236,240,5,15,0,0,237,239,3,118,59,0,238,237,1,0,0,0,239,242,1,0,0,0,240,
238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,22,
0,0,244,15,1,0,0,0,245,247,7,3,0,0,246,248,3,0,0,0,247,246,1,0,0,0,247,248,
1,0,0,0,248,249,1,0,0,0,249,250,3,18,9,0,250,17,1,0,0,0,251,252,5,15,0,0,
252,253,3,0,0,0,253,254,3,20,10,0,254,255,3,22,11,0,255,258,1,0,0,0,256,
257,7,4,0,0,257,259,3,70,35,0,258,256,1,0,0,0,258,259,1,0,0,0,259,263,1,
0,0,0,260,261,3,112,56,0,261,262,5,25,0,0,262,264,1,0,0,0,263,260,1,0,0,
0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,5,22,0,0,266,19,1,0,0,0,267,268,
7,5,0,0,268,21,1,0,0,0,269,274,3,0,0,0,270,271,5,8,0,0,271,273,3,0,0,0,272,
270,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,286,1,0,
0,0,276,274,1,0,0,0,277,279,5,27,0,0,278,280,3,24,12,0,279,278,1,0,0,0,279,
280,1,0,0,0,280,286,1,0,0,0,281,283,5,28,0,0,282,284,3,24,12,0,283,282,1,
0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,269,1,0,0,0,285,277,1,0,0,0,285,
281,1,0,0,0,286,23,1,0,0,0,287,288,5,16,0,0,288,293,3,0,0,0,289,290,5,8,
0,0,290,292,3,0,0,0,291,289,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,
294,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,5,23,0,0,297,25,1,0,
0,0,298,299,5,67,0,0,299,300,3,0,0,0,300,302,3,30,15,0,301,303,3,28,14,0,
302,301,1,0,0,0,302,303,1,0,0,0,303,27,1,0,0,0,304,305,5,94,0,0,305,306,
5,19,0,0,306,311,3,0,0,0,307,308,5,8,0,0,308,310,3,0,0,0,309,307,1,0,0,0,
310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,
1,0,0,0,314,315,5,24,0,0,315,29,1,0,0,0,316,317,5,15,0,0,317,318,3,118,59,
0,318,319,5,22,0,0,319,31,1,0,0,0,320,321,5,80,0,0,321,330,5,15,0,0,322,
329,3,44,22,0,323,324,3,0,0,0,324,325,3,46,23,0,325,326,5,25,0,0,326,329,
1,0,0,0,327,329,3,116,58,0,328,322,1,0,0,0,328,323,1,0,0,0,328,327,1,0,0,
0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,
1,0,0,0,333,334,3,34,17,0,334,335,5,22,0,0,335,33,1,0,0,0,336,337,7,6,0,
0,337,339,3,36,18,0,338,340,3,40,20,0,339,338,1,0,0,0,339,340,1,0,0,0,340,
342,1,0,0,0,341,343,3,42,21,0,342,341,1,0,0,0,342,343,1,0,0,0,343,345,1,
0,0,0,344,346,3,38,19,0,345,344,1,0,0,0,345,346,1,0,0,0,346,35,1,0,0,0,347,
348,7,7,0,0,348,353,3,76,38,0,349,350,5,8,0,0,350,352,3,76,38,0,351,349,
1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,37,1,0,0,0,355,
353,1,0,0,0,356,357,7,8,0,0,357,358,5,19,0,0,358,363,3,0,0,0,359,360,5,8,
0,0,360,362,3,0,0,0,361,359,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,
364,1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,367,5,24,0,0,367,39,1,0,
0,0,368,369,7,9,0,0,369,370,5,19,0,0,370,375,3,48,24,0,371,372,5,8,0,0,372,
374,3,48,24,0,373,371,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,
0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,379,5,24,0,0,379,41,1,0,0,0,380,
381,5,88,0,0,381,382,5,19,0,0,382,387,3,0,0,0,383,384,5,8,0,0,384,386,3,
0,0,0,385,383,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,
390,1,0,0,0,389,387,1,0,0,0,390,391,5,24,0,0,391,43,1,0,0,0,392,393,5,90,
0,0,393,395,3,0,0,0,394,396,3,46,23,0,395,394,1,0,0,0,395,396,1,0,0,0,396,
397,1,0,0,0,397,398,5,25,0,0,398,45,1,0,0,0,399,400,5,11,0,0,400,401,3,50,
25,0,401,47,1,0,0,0,402,403,3,50,25,0,403,49,1,0,0,0,404,405,3,52,26,0,405,
51,1,0,0,0,406,411,3,54,27,0,407,408,5,38,0,0,408,410,3,54,27,0,409,407,
1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,53,1,0,0,0,413,
411,1,0,0,0,414,419,3,56,28,0,415,416,5,39,0,0,416,418,3,56,28,0,417,415,
1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,55,1,0,0,0,421,
419,1,0,0,0,422,427,3,58,29,0,423,424,5,32,0,0,424,426,3,58,29,0,425,423,
1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,57,1,0,0,0,429,
427,1,0,0,0,430,431,5,31,0,0,431,435,3,58,29,0,432,435,3,60,30,0,433,435,
3,62,31,0,434,430,1,0,0,0,434,432,1,0,0,0,434,433,1,0,0,0,435,59,1,0,0,0,
436,440,3,64,32,0,437,440,3,66,33,0,438,440,3,80,40,0,439,436,1,0,0,0,439,
437,1,0,0,0,439,438,1,0,0,0,440,61,1,0,0,0,441,442,5,19,0,0,442,443,3,50,
25,0,443,444,5,24,0,0,444,63,1,0,0,0,445,447,5,44,0,0,446,448,3,76,38,0,
447,446,1,0,0,0,447,448,1,0,0,0,448,454,1,0,0,0,449,451,5,45,0,0,450,452,
3,76,38,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,445,1,0,0,
0,453,449,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,465,3,0,0,0,456,457,
5,32,0,0,457,458,5,15,0,0,458,461,3,76,38,0,459,460,5,5,0,0,460,462,3,76,
38,0,461,459,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,22,0,0,464,
466,1,0,0,0,465,456,1,0,0,0,465,466,1,0,0,0,466,493,1,0,0,0,467,469,5,44,
0,0,468,470,3,76,38,0,469,468,1,0,0,0,469,470,1,0,0,0,470,476,1,0,0,0,471,
473,5,45,0,0,472,474,3,76,38,0,473,472,1,0,0,0,473,474,1,0,0,0,474,476,1,
0,0,0,475,467,1,0,0,0,475,471,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,
478,5,19,0,0,478,488,3,0,0,0,479,480,5,32,0,0,480,481,5,15,0,0,481,484,3,
76,38,0,482,483,5,5,0,0,483,485,3,76,38,0,484,482,1,0,0,0,484,485,1,0,0,
0,485,486,1,0,0,0,486,487,5,22,0,0,487,489,1,0,0,0,488,479,1,0,0,0,488,489,
1,0,0,0,489,490,1,0,0,0,490,491,5,24,0,0,491,493,1,0,0,0,492,453,1,0,0,0,
492,475,1,0,0,0,493,65,1,0,0,0,494,510,3,0,0,0,495,507,3,68,34,0,496,497,
5,16,0,0,497,502,3,0,0,0,498,499,5,8,0,0,499,501,3,0,0,0,500,498,1,0,0,0,
501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,502,
1,0,0,0,505,506,5,23,0,0,506,508,1,0,0,0,507,496,1,0,0,0,507,508,1,0,0,0,
508,510,1,0,0,0,509,494,1,0,0,0,509,495,1,0,0,0,510,529,1,0,0,0,511,527,
5,1,0,0,512,528,3,0,0,0,513,525,3,68,34,0,514,515,5,16,0,0,515,520,3,0,0,
0,516,517,5,8,0,0,517,519,3,0,0,0,518,516,1,0,0,0,519,522,1,0,0,0,520,518,
1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,524,5,23,0,0,
524,526,1,0,0,0,525,514,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,512,
1,0,0,0,527,513,1,0,0,0,528,530,1,0,0,0,529,511,1,0,0,0,530,531,1,0,0,0,
531,529,1,0,0,0,531,532,1,0,0,0,532,597,1,0,0,0,533,535,5,44,0,0,534,536,
3,76,38,0,535,534,1,0,0,0,535,536,1,0,0,0,536,542,1,0,0,0,537,539,5,45,0,
0,538,540,3,76,38,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,
533,1,0,0,0,541,537,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,559,5,19,
0,0,544,560,3,0,0,0,545,557,3,68,34,0,546,547,5,16,0,0,547,552,3,0,0,0,548,
549,5,8,0,0,549,551,3,0,0,0,550,548,1,0,0,0,551,554,1,0,0,0,552,550,1,0,
0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,556,5,23,0,0,556,
558,1,0,0,0,557,546,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,544,1,0,
0,0,559,545,1,0,0,0,560,579,1,0,0,0,561,577,5,1,0,0,562,578,3,0,0,0,563,
575,3,68,34,0,564,565,5,16,0,0,565,570,3,0,0,0,566,567,5,8,0,0,567,569,3,
0,0,0,568,566,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,
573,1,0,0,0,572,570,1,0,0,0,573,574,5,23,0,0,574,576,1,0,0,0,575,564,1,0,
0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,562,1,0,0,0,577,563,1,0,0,0,578,
580,1,0,0,0,579,561,1,0,0,0,580,581,1,0,0,0,581,579,1,0,0,0,581,582,1,0,
0,0,582,583,1,0,0,0,583,594,5,24,0,0,584,585,5,32,0,0,585,586,5,15,0,0,586,
587,3,76,38,0,587,590,1,0,0,0,588,589,5,5,0,0,589,591,3,76,38,0,590,588,
1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,5,22,0,0,593,595,1,0,0,0,
594,584,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,509,1,0,0,0,596,541,
1,0,0,0,597,67,1,0,0,0,598,599,5,33,0,0,599,69,1,0,0,0,600,601,5,108,0,0,
601,71,1,0,0,0,602,603,7,10,0,0,603,73,1,0,0,0,604,611,3,76,38,0,605,611,
3,78,39,0,606,611,3,80,40,0,607,611,3,82,41,0,608,611,3,84,42,0,609,611,
3,86,43,0,610,604,1,0,0,0,610,605,1,0,0,0,610,606,1,0,0,0,610,607,1,0,0,
0,610,608,1,0,0,0,610,609,1,0,0,0,611,75,1,0,0,0,612,613,5,105,0,0,613,77,
1,0,0,0,614,615,5,106,0,0,615,79,1,0,0,0,616,617,5,109,0,0,617,81,1,0,0,
0,618,619,5,108,0,0,619,83,1,0,0,0,620,621,5,107,0,0,621,85,1,0,0,0,622,
623,5,110,0,0,623,87,1,0,0,0,624,625,5,63,0,0,625,626,3,0,0,0,626,627,3,
90,45,0,627,628,5,25,0,0,628,89,1,0,0,0,629,630,5,15,0,0,630,631,3,92,46,
0,631,632,5,22,0,0,632,91,1,0,0,0,633,635,3,94,47,0,634,633,1,0,0,0,635,
636,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,93,1,0,0,0,638,639,3,104,
52,0,639,640,3,110,55,0,640,641,5,25,0,0,641,95,1,0,0,0,642,643,5,64,0,0,
643,644,3,104,52,0,644,645,3,0,0,0,645,646,5,11,0,0,646,654,3,114,57,0,647,
648,5,8,0,0,648,649,3,0,0,0,649,650,5,11,0,0,650,651,3,114,57,0,651,653,
1,0,0,0,652,647,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,
655,657,1,0,0,0,656,654,1,0,0,0,657,658,5,25,0,0,658,97,1,0,0,0,659,660,
3,104,52,0,660,665,3,110,55,0,661,662,5,8,0,0,662,664,3,110,55,0,663,661,
1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,
667,665,1,0,0,0,668,669,5,25,0,0,669,99,1,0,0,0,670,671,3,104,52,0,671,676,
3,110,55,0,672,673,5,8,0,0,673,675,3,110,55,0,674,672,1,0,0,0,675,678,1,
0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,676,1,0,0,0,679,
680,5,25,0,0,680,101,1,0,0,0,681,682,7,11,0,0,682,103,1,0,0,0,683,686,3,
106,53,0,684,686,3,108,54,0,685,683,1,0,0,0,685,684,1,0,0,0,686,105,1,0,
0,0,687,688,7,12,0,0,688,107,1,0,0,0,689,690,5,73,0,0,690,691,5,15,0,0,691,
696,3,0,0,0,692,693,5,8,0,0,693,695,3,0,0,0,694,692,1,0,0,0,695,698,1,0,
0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,696,1,0,0,0,699,
700,5,22,0,0,700,109,1,0,0,0,701,704,3,0,0,0,702,703,5,11,0,0,703,705,3,
114,57,0,704,702,1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,708,3,112,56,
0,707,706,1,0,0,0,707,708,1,0,0,0,708,111,1,0,0,0,709,710,5,74,0,0,710,711,
3,120,60,0,711,113,1,0,0,0,712,713,3,120,60,0,713,115,1,0,0,0,714,716,3,
168,84,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,719,5,92,0,
0,718,720,7,13,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,723,
3,120,60,0,722,724,3,28,14,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,
0,0,725,726,5,25,0,0,726,117,1,0,0,0,727,728,3,120,60,0,728,729,5,25,0,0,
729,119,1,0,0,0,730,733,3,122,61,0,731,732,7,14,0,0,732,734,3,120,60,0,733,
731,1,0,0,0,733,734,1,0,0,0,734,121,1,0,0,0,735,740,3,124,62,0,736,737,5,
30,0,0,737,739,3,124,62,0,738,736,1,0,0,0,739,742,1,0,0,0,740,738,1,0,0,
0,740,741,1,0,0,0,741,123,1,0,0,0,742,740,1,0,0,0,743,748,3,126,63,0,744,
745,5,38,0,0,745,747,3,126,63,0,746,744,1,0,0,0,747,750,1,0,0,0,748,746,
1,0,0,0,748,749,1,0,0,0,749,125,1,0,0,0,750,748,1,0,0,0,751,756,3,128,64,
0,752,753,5,39,0,0,753,755,3,128,64,0,754,752,1,0,0,0,755,758,1,0,0,0,756,
754,1,0,0,0,756,757,1,0,0,0,757,127,1,0,0,0,758,756,1,0,0,0,759,764,3,130,
65,0,760,761,5,32,0,0,761,763,3,130,65,0,762,760,1,0,0,0,763,766,1,0,0,0,
764,762,1,0,0,0,764,765,1,0,0,0,765,129,1,0,0,0,766,764,1,0,0,0,767,772,
3,132,66,0,768,769,7,15,0,0,769,771,3,132,66,0,770,768,1,0,0,0,771,774,1,
0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,131,1,0,0,0,774,772,1,0,0,0,775,
780,3,134,67,0,776,777,7,16,0,0,777,779,3,134,67,0,778,776,1,0,0,0,779,782,
1,0,0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,133,1,0,0,0,782,780,1,0,0,0,
783,788,3,136,68,0,784,785,7,17,0,0,785,787,3,136,68,0,786,784,1,0,0,0,787,
790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,135,1,0,0,0,790,788,1,0,
0,0,791,796,3,138,69,0,792,793,7,18,0,0,793,795,3,138,69,0,794,792,1,0,0,
0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,137,1,0,0,0,798,796,
1,0,0,0,799,804,3,140,70,0,800,801,5,36,0,0,801,803,3,140,70,0,802,800,1,
0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,139,1,0,0,0,806,
804,1,0,0,0,807,808,5,28,0,0,808,813,3,140,70,0,809,810,5,20,0,0,810,813,
3,140,70,0,811,813,3,142,71,0,812,807,1,0,0,0,812,809,1,0,0,0,812,811,1,
0,0,0,813,141,1,0,0,0,814,815,5,31,0,0,815,821,3,140,70,0,816,818,3,158,
79,0,817,819,7,19,0,0,818,817,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,
814,1,0,0,0,820,816,1,0,0,0,821,143,1,0,0,0,822,823,5,99,0,0,823,826,5,19,
0,0,824,825,5,8,0,0,825,827,3,120,60,0,826,824,1,0,0,0,827,828,1,0,0,0,828,
826,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,831,5,24,0,0,831,145,1,0,
0,0,832,833,5,95,0,0,833,834,5,19,0,0,834,835,3,0,0,0,835,836,5,24,0,0,836,
147,1,0,0,0,837,838,5,93,0,0,838,839,5,19,0,0,839,840,3,160,80,0,840,841,
5,24,0,0,841,149,1,0,0,0,842,843,5,101,0,0,843,844,3,0,0,0,844,845,5,5,0,
0,845,846,3,106,53,0,846,847,3,152,76,0,847,151,1,0,0,0,848,849,3,154,77,
0,849,853,5,15,0,0,850,852,3,100,50,0,851,850,1,0,0,0,852,855,1,0,0,0,853,
851,1,0,0,0,853,854,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,856,858,3,118,
59,0,857,856,1,0,0,0,858,859,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,
861,1,0,0,0,861,862,5,22,0,0,862,153,1,0,0,0,863,868,5,19,0,0,864,865,3,
0,0,0,865,866,5,5,0,0,866,867,3,106,53,0,867,869,1,0,0,0,868,864,1,0,0,0,
868,869,1,0,0,0,869,877,1,0,0,0,870,871,5,8,0,0,871,872,3,0,0,0,872,873,
5,5,0,0,873,874,3,106,53,0,874,876,1,0,0,0,875,870,1,0,0,0,876,879,1,0,0,
0,877,875,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,877,1,0,0,0,880,881,
5,24,0,0,881,155,1,0,0,0,882,883,5,102,0,0,883,884,3,120,60,0,884,157,1,
0,0,0,885,894,3,162,81,0,886,894,3,160,80,0,887,894,3,74,37,0,888,894,3,
148,74,0,889,894,3,146,73,0,890,894,3,144,72,0,891,894,3,156,78,0,892,894,
3,164,82,0,893,885,1,0,0,0,893,886,1,0,0,0,893,887,1,0,0,0,893,888,1,0,0,
0,893,889,1,0,0,0,893,890,1,0,0,0,893,891,1,0,0,0,893,892,1,0,0,0,894,159,
1,0,0,0,895,898,3,0,0,0,896,897,5,9,0,0,897,899,3,0,0,0,898,896,1,0,0,0,
898,899,1,0,0,0,899,161,1,0,0,0,900,901,5,19,0,0,901,902,3,120,60,0,902,
903,5,24,0,0,903,163,1,0,0,0,904,905,3,0,0,0,905,906,5,19,0,0,906,911,3,
120,60,0,907,908,5,8,0,0,908,910,3,120,60,0,909,907,1,0,0,0,910,913,1,0,
0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,911,1,0,0,0,914,
915,5,24,0,0,915,165,1,0,0,0,916,917,5,103,0,0,917,918,3,162,81,0,918,921,
3,118,59,0,919,920,5,104,0,0,920,922,3,118,59,0,921,919,1,0,0,0,921,922,
1,0,0,0,922,167,1,0,0,0,923,924,5,3,0,0,924,925,5,66,0,0,925,926,5,5,0,0,
926,927,3,0,0,0,927,169,1,0,0,0,99,185,198,200,206,212,218,222,229,240,247,
258,263,274,279,283,285,293,302,311,328,330,339,342,345,353,363,375,387,
395,411,419,427,434,439,447,451,453,461,465,469,473,475,484,488,492,502,
507,509,520,525,527,531,535,539,541,552,557,559,570,575,577,581,590,594,
596,610,636,654,665,676,685,696,704,707,715,719,723,733,740,748,756,764,
772,780,788,796,804,812,818,820,828,853,859,868,877,893,898,911,921];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CycloneParser extends antlr4.Parser {

    static grammarFileName = "CycloneParser.g4";
    static literalNames = [ null, "'->'", "'<->'", "'@'", "'|'", "':'", 
                            "'::'", "':='", "','", "'.'", "'..'", "'='", 
                            "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", 
                            "'('", "'-'", "'!='", "'}'", "']'", "')'", "';'", 
                            "'/'", "'*'", "'+'", "'xor'", "'=>'", "'!'", 
                            "'^'", "'_'", "'++'", "'--'", "'**'", "'%'", 
                            "'||'", "'&&'", "'+='", "'-='", "'*='", "'/='", 
                            "'<<'", "'>>'", "'=='", "'global'", "'native'", 
                            "'debug'", "'log'", "'output'", "'trace'", "'precision'", 
                            "'timeout'", "'detect'", "'state'", "'node'", 
                            "'machine'", "'graph'", "'transition'", "'trans'", 
                            "'edge'", "'record'", "'const'", "'on'", "'label'", 
                            "'invariant'", "'int'", "'bool'", "'real'", 
                            "'char'", "'string'", "'enum'", "'where'", "'start'", 
                            "'final'", "'abstract'", "'normal'", "'prev'", 
                            "'goal'", "'check'", "'for'", "'stop'", "'at'", 
                            "'via'", "'condition'", "'reach'", "'with'", 
                            "'enumerate'", "'let'", "'each'", "'assert'", 
                            "'initial'", "'in'", "'fresh'", "'option-'", 
                            "'always'", "'some'", "'one'", "'upto'", "'function'", 
                            "'return'", "'if'", "'else'" ];
    static symbolicNames = [ null, "ARROW", "BI_ARROW", "AT_SIGN", "BAR", 
                             "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", 
                             "DOT", "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", 
                             "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", 
                             "LPAREN", "MINUS", "NOT_EQUAL", "RBRACE", "RBRACK", 
                             "RPAREN", "SEMI", "SLASH", "STAR", "PLUS", 
                             "XOR", "IMPLIES", "NOT", "HAT", "P_OP_ONE", 
                             "PLUS_PLUS", "MINUS_MINUS", "TIMES_TIMES", 
                             "MOD", "OR", "AND", "ASSIGN_PLUS_EQ", "ASSIGN_MINUS_EQ", 
                             "ASSIGN_TIMES_EQ", "ASSIGN_DIV_EQ", "SHIFT_LEFT", 
                             "SHIFT_RIGHT", "DOUBLE_EQUAL", "GLOBAL", "NATIVE", 
                             "DEBUG", "LOG", "OUTPUT", "TRACE", "PRECISION", 
                             "TIMEOUT", "DETECT", "STATE", "NODE", "MACHINE", 
                             "GRAPH", "TRANS1", "TRANS2", "EDGE", "RECORD", 
                             "CONST", "ON", "LABEL", "INVARIANT", "INT", 
                             "BOOL", "REAL", "CHAR", "STRING", "ENUM", "WHERE", 
                             "START", "FINAL", "ABSTRACT", "NORMAL", "PREV", 
                             "GOAL", "CHECK", "FOR", "STOP", "AT", "VIA", 
                             "CONDITION", "REACH", "WITH", "ENUMERATE", 
                             "LET", "EACH", "ASSERT", "INITIAL", "IN", "FRESH", 
                             "OPTION", "ALWAYS", "SOME", "ONE", "UPTO", 
                             "FUNCTION", "RETURN", "IF", "ELSE", "INTLITERAL", 
                             "REALLITERAL", "CHARLITERAL", "STRINGLITERAL", 
                             "BOOLLITERAL", "ENUMLITERAL", "IDENT", "ML_COMMENT", 
                             "SL_COMMENT", "WS" ];
    static ruleNames = [ "identifier", "head", "compOptions", "optionName", 
                         "machine", "machineScope", "stateExpr", "stateScope", 
                         "trans", "transScope", "transOp", "transDef", "transExclExpr", 
                         "invariantExpression", "inExpr", "invariantScope", 
                         "goal", "checkExpr", "forExpr", "stopExpr", "viaExpr", 
                         "withExpr", "letExpr", "pathCondAssignExpr", "pathExpr", 
                         "pathCondition", "orPathCondition", "andPathCondition", 
                         "xorPathCondition", "unaryPathCondition", "primaryCondition", 
                         "parPathCondition", "stateIncExpr", "pathPrimaryExpr", 
                         "pathOp", "label", "stateModifier", "literal", 
                         "intLiteral", "realLiteral", "boolLiteral", "stringLiteral", 
                         "charLiteral", "enumLiteral", "record", "recordScope", 
                         "recordVariableDeclGroup", "recordVariableDecl", 
                         "globalConstant", "globalVariableDecl", "localVariableDecl", 
                         "modifier", "type", "primitiveType", "enumType", 
                         "variableDeclarator", "whereExpr", "variableInitializer", 
                         "assertExpr", "statement", "expression", "conditionalImpliesExpression", 
                         "conditionalOrExpression", "conditionalAndExpression", 
                         "conditionalXorExpression", "equalityExpression", 
                         "relationalExpression", "additiveExpression", "multiplicativeExpression", 
                         "powExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
                         "oneExpr", "freshExpr", "initialExpr", "functionDeclaration", 
                         "functionBodyScope", "functionParamsDecl", "returnExpr", 
                         "primary", "dotIdentifierExpr", "parExpression", 
                         "funCall", "iteStatement", "annotationExpr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CycloneParser.ruleNames;
        this.literalNames = CycloneParser.literalNames;
        this.symbolicNames = CycloneParser.symbolicNames;
    }



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CycloneParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 170;
	        this.match(CycloneParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	head() {
	    let localctx = new HeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CycloneParser.RULE_head);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 172;
	        this.compOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOptions() {
	    let localctx = new CompOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CycloneParser.RULE_compOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 174;
	        this.match(CycloneParser.OPTION);
	        this.state = 175;
	        this.optionName();
	        this.state = 176;
	        this.match(CycloneParser.EQUAL);
	        this.state = 177;
	        this.literal();
	        this.state = 178;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionName() {
	    let localctx = new OptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CycloneParser.RULE_optionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        _la = this._input.LA(1);
	        if(!(((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 127) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machine() {
	    let localctx = new MachineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CycloneParser.RULE_machine);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===96) {
	            this.state = 182;
	            this.compOptions();
	            this.state = 187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 188;
	        _la = this._input.LA(1);
	        if(!(_la===58 || _la===59)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 189;
	        this.identifier();
	        this.state = 190;
	        this.machineScope();
	        this.state = 191;
	        this.match(CycloneParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineScope() {
	    let localctx = new MachineScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CycloneParser.RULE_machineScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.match(CycloneParser.LBRACE);
	        this.state = 200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 1763) !== 0) || _la===101) {
	            this.state = 198;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 68:
	            case 69:
	            case 70:
	            case 72:
	            case 73:
	                this.state = 194;
	                this.globalVariableDecl();
	                break;
	            case 64:
	                this.state = 195;
	                this.globalConstant();
	                break;
	            case 63:
	                this.state = 196;
	                this.record();
	                break;
	            case 101:
	                this.state = 197;
	                this.functionDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 7864323) !== 0)) {
	            this.state = 203;
	            this.stateExpr();
	            this.state = 208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 7) !== 0)) {
	            this.state = 209;
	            this.trans();
	            this.state = 214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===67) {
	            this.state = 215;
	            this.invariantExpression();
	            this.state = 220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 222;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 221;
	            this.goal();
	        }

	        this.state = 224;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateExpr() {
	    let localctx = new StateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CycloneParser.RULE_stateExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 15) !== 0)) {
	            this.state = 226;
	            this.stateModifier();
	            this.state = 231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 232;
	        _la = this._input.LA(1);
	        if(!(_la===56 || _la===57)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 233;
	        this.identifier();
	        this.state = 234;
	        this.stateScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateScope() {
	    let localctx = new StateScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CycloneParser.RULE_stateScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 236;
	        this.match(CycloneParser.LBRACE);
	        this.state = 240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2417491968) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 520773) !== 0)) {
	            this.state = 237;
	            this.statement();
	            this.state = 242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 243;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trans() {
	    let localctx = new TransContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CycloneParser.RULE_trans);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        _la = this._input.LA(1);
	        if(!(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 246;
	            this.identifier();
	        }

	        this.state = 249;
	        this.transScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transScope() {
	    let localctx = new TransScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CycloneParser.RULE_transScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        this.match(CycloneParser.LBRACE);
	        this.state = 252;
	        this.identifier();

	        this.state = 253;
	        this.transOp();
	        this.state = 254;
	        this.transDef();
	        this.state = 258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65 || _la===66) {
	            this.state = 256;
	            _la = this._input.LA(1);
	            if(!(_la===65 || _la===66)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 257;
	            this.label();
	        }

	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 260;
	            this.whereExpr();
	            this.state = 261;
	            this.match(CycloneParser.SEMI);
	        }

	        this.state = 265;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transOp() {
	    let localctx = new TransOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CycloneParser.RULE_transOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===2)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transDef() {
	    let localctx = new TransDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CycloneParser.RULE_transDef);
	    var _la = 0;
	    try {
	        this.state = 285;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 269;
	            this.identifier();
	            this.state = 274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===8) {
	                this.state = 270;
	                this.match(CycloneParser.COMMA);
	                this.state = 271;
	                this.identifier();
	                this.state = 276;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 277;
	            this.match(CycloneParser.STAR);
	            this.state = 279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 278;
	                this.transExclExpr();
	            }

	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 281;
	            this.match(CycloneParser.PLUS);
	            this.state = 283;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 282;
	                this.transExclExpr();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transExclExpr() {
	    let localctx = new TransExclExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CycloneParser.RULE_transExclExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 287;
	        this.match(CycloneParser.LBRACK);
	        this.state = 288;
	        this.identifier();
	        this.state = 293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 289;
	            this.match(CycloneParser.COMMA);
	            this.state = 290;
	            this.identifier();
	            this.state = 295;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 296;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantExpression() {
	    let localctx = new InvariantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CycloneParser.RULE_invariantExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 298;
	        this.match(CycloneParser.INVARIANT);
	        this.state = 299;
	        this.identifier();
	        this.state = 300;
	        this.invariantScope();
	        this.state = 302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 301;
	            this.inExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inExpr() {
	    let localctx = new InExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CycloneParser.RULE_inExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 304;
	        this.match(CycloneParser.IN);
	        this.state = 305;
	        this.match(CycloneParser.LPAREN);
	        this.state = 306;
	        this.identifier();
	        this.state = 311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 307;
	            this.match(CycloneParser.COMMA);
	            this.state = 308;
	            this.identifier();
	            this.state = 313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 314;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantScope() {
	    let localctx = new InvariantScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CycloneParser.RULE_invariantScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.match(CycloneParser.LBRACE);

	        this.state = 317;
	        this.statement();
	        this.state = 318;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goal() {
	    let localctx = new GoalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CycloneParser.RULE_goal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.match(CycloneParser.GOAL);
	        this.state = 321;
	        this.match(CycloneParser.LBRACE);
	        this.state = 330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3 || ((((_la - 90)) & ~0x1f) === 0 && ((1 << (_la - 90)) & 2097157) !== 0)) {
	            this.state = 328;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 90:
	                this.state = 322;
	                this.letExpr();
	                break;
	            case 111:
	                this.state = 323;
	                this.identifier();
	                this.state = 324;
	                this.pathCondAssignExpr();
	                this.state = 325;
	                this.match(CycloneParser.SEMI);
	                break;
	            case 3:
	            case 92:
	                this.state = 327;
	                this.assertExpr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 333;
	        this.checkExpr();
	        this.state = 334;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkExpr() {
	    let localctx = new CheckExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CycloneParser.RULE_checkExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        _la = this._input.LA(1);
	        if(!(_la===81 || _la===89)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 337;
	        this.forExpr();
	        this.state = 339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85 || _la===86) {
	            this.state = 338;
	            this.viaExpr();
	        }

	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 341;
	            this.withExpr();
	        }

	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83 || _la===87) {
	            this.state = 344;
	            this.stopExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpr() {
	    let localctx = new ForExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CycloneParser.RULE_forExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 347;
	        _la = this._input.LA(1);
	        if(!(((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 262657) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 348;
	        this.intLiteral();
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 349;
	            this.match(CycloneParser.COMMA);
	            this.state = 350;
	            this.intLiteral();
	            this.state = 355;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopExpr() {
	    let localctx = new StopExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CycloneParser.RULE_stopExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 356;
	        _la = this._input.LA(1);
	        if(!(_la===83 || _la===87)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 357;
	        this.match(CycloneParser.LPAREN);
	        this.state = 358;
	        this.identifier();
	        this.state = 363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 359;
	            this.match(CycloneParser.COMMA);
	            this.state = 360;
	            this.identifier();
	            this.state = 365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 366;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viaExpr() {
	    let localctx = new ViaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CycloneParser.RULE_viaExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        _la = this._input.LA(1);
	        if(!(_la===85 || _la===86)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 369;
	        this.match(CycloneParser.LPAREN);

	        this.state = 370;
	        this.pathExpr();
	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 371;
	            this.match(CycloneParser.COMMA);
	            this.state = 372;
	            this.pathExpr();
	            this.state = 377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 378;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withExpr() {
	    let localctx = new WithExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CycloneParser.RULE_withExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 380;
	        this.match(CycloneParser.WITH);
	        this.state = 381;
	        this.match(CycloneParser.LPAREN);

	        this.state = 382;
	        this.identifier();
	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 383;
	            this.match(CycloneParser.COMMA);
	            this.state = 384;
	            this.identifier();
	            this.state = 389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 390;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letExpr() {
	    let localctx = new LetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CycloneParser.RULE_letExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 392;
	        this.match(CycloneParser.LET);
	        this.state = 393;
	        this.identifier();
	        this.state = 395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 394;
	            this.pathCondAssignExpr();
	        }

	        this.state = 397;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondAssignExpr() {
	    let localctx = new PathCondAssignExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CycloneParser.RULE_pathCondAssignExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.match(CycloneParser.EQUAL);
	        this.state = 400;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpr() {
	    let localctx = new PathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CycloneParser.RULE_pathExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondition() {
	    let localctx = new PathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CycloneParser.RULE_pathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.orPathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orPathCondition() {
	    let localctx = new OrPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CycloneParser.RULE_orPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.andPathCondition();
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 407;
	            this.match(CycloneParser.OR);
	            this.state = 408;
	            this.andPathCondition();
	            this.state = 413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andPathCondition() {
	    let localctx = new AndPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CycloneParser.RULE_andPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.xorPathCondition();
	        this.state = 419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===39) {
	            this.state = 415;
	            this.match(CycloneParser.AND);
	            this.state = 416;
	            this.xorPathCondition();
	            this.state = 421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorPathCondition() {
	    let localctx = new XorPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CycloneParser.RULE_xorPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.unaryPathCondition();
	        this.state = 427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===32) {
	            this.state = 423;
	            this.match(CycloneParser.HAT);
	            this.state = 424;
	            this.unaryPathCondition();
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryPathCondition() {
	    let localctx = new UnaryPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CycloneParser.RULE_unaryPathCondition);
	    try {
	        this.state = 434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 430;
	            this.match(CycloneParser.NOT);
	            this.state = 431;
	            this.unaryPathCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 432;
	            this.primaryCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 433;
	            this.parPathCondition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryCondition() {
	    let localctx = new PrimaryConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CycloneParser.RULE_primaryCondition);
	    try {
	        this.state = 439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 436;
	            this.stateIncExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 437;
	            this.pathPrimaryExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 438;
	            this.boolLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parPathCondition() {
	    let localctx = new ParPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CycloneParser.RULE_parPathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 441;
	        this.match(CycloneParser.LPAREN);
	        this.state = 442;
	        this.pathCondition();
	        this.state = 443;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateIncExpr() {
	    let localctx = new StateIncExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CycloneParser.RULE_stateIncExpr);
	    var _la = 0;
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 453;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 44:
	            	this.state = 445;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 447;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 446;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 45:
	            	this.state = 449;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 451;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 450;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 111:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 455;
	            this.identifier();
	            this.state = 465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 456;
	                this.match(CycloneParser.HAT);
	                this.state = 457;
	                this.match(CycloneParser.LBRACE);
	                this.state = 458;
	                this.intLiteral();
	                this.state = 461;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 459;
	                    this.match(CycloneParser.COLON);
	                    this.state = 460;
	                    this.intLiteral();
	                }

	                this.state = 463;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 475;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 44:
	            	this.state = 467;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 469;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 468;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 45:
	            	this.state = 471;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 473;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 472;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 477;
	            this.match(CycloneParser.LPAREN);
	            this.state = 478;
	            this.identifier();
	            this.state = 488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 479;
	                this.match(CycloneParser.HAT);
	                this.state = 480;
	                this.match(CycloneParser.LBRACE);
	                this.state = 481;
	                this.intLiteral();
	                this.state = 484;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 482;
	                    this.match(CycloneParser.COLON);
	                    this.state = 483;
	                    this.intLiteral();
	                }

	                this.state = 486;
	                this.match(CycloneParser.RBRACE);
	            }

	            this.state = 490;
	            this.match(CycloneParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimaryExpr() {
	    let localctx = new PathPrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CycloneParser.RULE_pathPrimaryExpr);
	    var _la = 0;
	    try {
	        this.state = 596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 111:
	                this.state = 494;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 495;
	                this.pathOp();
	                this.state = 507;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 496;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 497;
	                    this.identifier();
	                    this.state = 502;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 498;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 499;
	                        this.identifier();
	                        this.state = 504;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 505;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 529; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 511;
	                this.match(CycloneParser.ARROW);
	                this.state = 527;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 111:
	                    this.state = 512;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 513;
	                    this.pathOp();
	                    this.state = 525;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 514;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 515;
	                        this.identifier();
	                        this.state = 520;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 516;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 517;
	                            this.identifier();
	                            this.state = 522;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 523;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 531; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            break;
	        case 19:
	        case 44:
	        case 45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 541;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 44:
	            	this.state = 533;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 535;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 534;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 45:
	            	this.state = 537;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 539;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===105) {
	            	    this.state = 538;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 543;
	            this.match(CycloneParser.LPAREN);
	            this.state = 559;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 111:
	                this.state = 544;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 545;
	                this.pathOp();
	                this.state = 557;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 546;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 547;
	                    this.identifier();
	                    this.state = 552;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 548;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 549;
	                        this.identifier();
	                        this.state = 554;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 555;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 579; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 561;
	                this.match(CycloneParser.ARROW);
	                this.state = 577;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 111:
	                    this.state = 562;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 563;
	                    this.pathOp();
	                    this.state = 575;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 564;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 565;
	                        this.identifier();
	                        this.state = 570;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 566;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 567;
	                            this.identifier();
	                            this.state = 572;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 573;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 581; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            this.state = 583;
	            this.match(CycloneParser.RPAREN);
	            this.state = 594;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            if(la_===1) {
	                this.state = 584;
	                this.match(CycloneParser.HAT);
	                this.state = 585;
	                this.match(CycloneParser.LBRACE);
	                this.state = 586;
	                this.intLiteral();
	                this.state = 590;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 588;
	                    this.match(CycloneParser.COLON);
	                    this.state = 589;
	                    this.intLiteral();
	                }

	                this.state = 592;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOp() {
	    let localctx = new PathOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CycloneParser.RULE_pathOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(CycloneParser.P_OP_ONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CycloneParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateModifier() {
	    let localctx = new StateModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CycloneParser.RULE_stateModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        _la = this._input.LA(1);
	        if(!(((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CycloneParser.RULE_literal);
	    try {
	        this.state = 610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 604;
	            this.intLiteral();
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 605;
	            this.realLiteral();
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 606;
	            this.boolLiteral();
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 607;
	            this.stringLiteral();
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 608;
	            this.charLiteral();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 609;
	            this.enumLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intLiteral() {
	    let localctx = new IntLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CycloneParser.RULE_intLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(CycloneParser.INTLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realLiteral() {
	    let localctx = new RealLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CycloneParser.RULE_realLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.match(CycloneParser.REALLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CycloneParser.RULE_boolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 616;
	        this.match(CycloneParser.BOOLLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CycloneParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLiteral() {
	    let localctx = new CharLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CycloneParser.RULE_charLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.match(CycloneParser.CHARLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumLiteral() {
	    let localctx = new EnumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CycloneParser.RULE_enumLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.match(CycloneParser.ENUMLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record() {
	    let localctx = new RecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CycloneParser.RULE_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 624;
	        this.match(CycloneParser.RECORD);
	        this.state = 625;
	        this.identifier();
	        this.state = 626;
	        this.recordScope();
	        this.state = 627;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordScope() {
	    let localctx = new RecordScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CycloneParser.RULE_recordScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(CycloneParser.LBRACE);
	        this.state = 630;
	        this.recordVariableDeclGroup();
	        this.state = 631;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDeclGroup() {
	    let localctx = new RecordVariableDeclGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CycloneParser.RULE_recordVariableDeclGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 633;
	            this.recordVariableDecl();
	            this.state = 636; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 55) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDecl() {
	    let localctx = new RecordVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CycloneParser.RULE_recordVariableDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.type();
	        this.state = 639;
	        this.variableDeclarator();
	        this.state = 640;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstant() {
	    let localctx = new GlobalConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CycloneParser.RULE_globalConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.match(CycloneParser.CONST);
	        this.state = 643;
	        this.type();
	        this.state = 644;
	        this.identifier();
	        this.state = 645;
	        this.match(CycloneParser.EQUAL);
	        this.state = 646;
	        this.variableInitializer();
	        this.state = 654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 647;
	            this.match(CycloneParser.COMMA);
	            this.state = 648;
	            this.identifier();
	            this.state = 649;
	            this.match(CycloneParser.EQUAL);
	            this.state = 650;
	            this.variableInitializer();
	            this.state = 656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 657;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalVariableDecl() {
	    let localctx = new GlobalVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CycloneParser.RULE_globalVariableDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659;
	        this.type();
	        this.state = 660;
	        this.variableDeclarator();
	        this.state = 665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 661;
	            this.match(CycloneParser.COMMA);
	            this.state = 662;
	            this.variableDeclarator();
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 668;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDecl() {
	    let localctx = new LocalVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CycloneParser.RULE_localVariableDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this.type();
	        this.state = 671;
	        this.variableDeclarator();
	        this.state = 676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 672;
	            this.match(CycloneParser.COMMA);
	            this.state = 673;
	            this.variableDeclarator();
	            this.state = 678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 679;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CycloneParser.RULE_modifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 681;
	        _la = this._input.LA(1);
	        if(!(_la===47 || _la===48)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CycloneParser.RULE_type);
	    try {
	        this.state = 685;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 69:
	        case 70:
	        case 72:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 683;
	            this.primitiveType();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 684;
	            this.enumType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CycloneParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        _la = this._input.LA(1);
	        if(!(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 23) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CycloneParser.RULE_enumType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        this.match(CycloneParser.ENUM);
	        this.state = 690;
	        this.match(CycloneParser.LBRACE);
	        this.state = 691;
	        this.identifier();
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 692;
	            this.match(CycloneParser.COMMA);
	            this.state = 693;
	            this.identifier();
	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 699;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CycloneParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.identifier();
	        this.state = 704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 702;
	            this.match(CycloneParser.EQUAL);
	            this.state = 703;
	            this.variableInitializer();
	        }

	        this.state = 707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 706;
	            this.whereExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereExpr() {
	    let localctx = new WhereExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CycloneParser.RULE_whereExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.match(CycloneParser.WHERE);
	        this.state = 710;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CycloneParser.RULE_variableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertExpr() {
	    let localctx = new AssertExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CycloneParser.RULE_assertExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 714;
	            this.annotationExpr();
	        }

	        this.state = 717;
	        this.match(CycloneParser.ASSERT);
	        this.state = 719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97 || _la===98) {
	            this.state = 718;
	            _la = this._input.LA(1);
	            if(!(_la===97 || _la===98)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 721;
	        this.expression();
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 722;
	            this.inExpr();
	        }

	        this.state = 725;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CycloneParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.expression();
	        this.state = 728;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CycloneParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.conditionalImpliesExpression();
	        this.state = 733;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 731;
	            _la = this._input.LA(1);
	            if(!(_la===11 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 732;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalImpliesExpression() {
	    let localctx = new ConditionalImpliesExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CycloneParser.RULE_conditionalImpliesExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.conditionalOrExpression();
	        this.state = 740;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 736;
	                this.match(CycloneParser.IMPLIES);
	                this.state = 737;
	                this.conditionalOrExpression(); 
	            }
	            this.state = 742;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CycloneParser.RULE_conditionalOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.conditionalAndExpression();
	        this.state = 748;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 744;
	                this.match(CycloneParser.OR);
	                this.state = 745;
	                this.conditionalAndExpression(); 
	            }
	            this.state = 750;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CycloneParser.RULE_conditionalAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.conditionalXorExpression();
	        this.state = 756;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 752;
	                this.match(CycloneParser.AND);
	                this.state = 753;
	                this.conditionalXorExpression(); 
	            }
	            this.state = 758;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalXorExpression() {
	    let localctx = new ConditionalXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CycloneParser.RULE_conditionalXorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.equalityExpression();
	        this.state = 764;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 760;
	                this.match(CycloneParser.HAT);
	                this.state = 761;
	                this.equalityExpression(); 
	            }
	            this.state = 766;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CycloneParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.relationalExpression();
	        this.state = 772;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 768;
	                _la = this._input.LA(1);
	                if(!(_la===21 || _la===46)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 769;
	                this.relationalExpression(); 
	            }
	            this.state = 774;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CycloneParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.additiveExpression();
	        this.state = 780;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 776;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 405504) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 777;
	                this.additiveExpression(); 
	            }
	            this.state = 782;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CycloneParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        this.multiplicativeExpression();
	        this.state = 788;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 784;
	                _la = this._input.LA(1);
	                if(!(_la===20 || _la===28)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 785;
	                this.multiplicativeExpression(); 
	            }
	            this.state = 790;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CycloneParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.powExpression();
	        this.state = 796;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 792;
	                _la = this._input.LA(1);
	                if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 2051) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 793;
	                this.powExpression(); 
	            }
	            this.state = 798;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powExpression() {
	    let localctx = new PowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CycloneParser.RULE_powExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 799;
	        this.unaryExpression();
	        this.state = 804;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 800;
	                this.match(CycloneParser.TIMES_TIMES);
	                this.state = 801;
	                this.unaryExpression(); 
	            }
	            this.state = 806;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CycloneParser.RULE_unaryExpression);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 807;
	            this.match(CycloneParser.PLUS);
	            this.state = 808;
	            this.unaryExpression();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 809;
	            this.match(CycloneParser.MINUS);
	            this.state = 810;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 31:
	        case 93:
	        case 95:
	        case 99:
	        case 102:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 811;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CycloneParser.RULE_unaryExpressionNotPlusMinus);
	    var _la = 0;
	    try {
	        this.state = 820;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 814;
	            this.match(CycloneParser.NOT);
	            this.state = 815;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 93:
	        case 95:
	        case 99:
	        case 102:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 816;
	            this.primary();
	            this.state = 818;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 817;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===35)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneExpr() {
	    let localctx = new OneExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CycloneParser.RULE_oneExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.match(CycloneParser.ONE);
	        this.state = 823;
	        this.match(CycloneParser.LPAREN);
	        this.state = 826; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 824;
	            this.match(CycloneParser.COMMA);
	            this.state = 825;
	            this.expression();
	            this.state = 828; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===8);
	        this.state = 830;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freshExpr() {
	    let localctx = new FreshExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CycloneParser.RULE_freshExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this.match(CycloneParser.FRESH);
	        this.state = 833;
	        this.match(CycloneParser.LPAREN);
	        this.state = 834;
	        this.identifier();
	        this.state = 835;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialExpr() {
	    let localctx = new InitialExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CycloneParser.RULE_initialExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this.match(CycloneParser.INITIAL);
	        this.state = 838;
	        this.match(CycloneParser.LPAREN);
	        this.state = 839;
	        this.dotIdentifierExpr();
	        this.state = 840;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CycloneParser.RULE_functionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.match(CycloneParser.FUNCTION);

	        this.state = 843;
	        this.identifier();
	        this.state = 844;
	        this.match(CycloneParser.COLON);
	        this.state = 845;
	        this.primitiveType();
	        this.state = 846;
	        this.functionBodyScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBodyScope() {
	    let localctx = new FunctionBodyScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CycloneParser.RULE_functionBodyScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.functionParamsDecl();
	        this.state = 849;
	        this.match(CycloneParser.LBRACE);
	        this.state = 853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 55) !== 0)) {
	            this.state = 850;
	            this.localVariableDecl();
	            this.state = 855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 857; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 856;
	            this.statement();
	            this.state = 859; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2417491968) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 520773) !== 0));
	        this.state = 861;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParamsDecl() {
	    let localctx = new FunctionParamsDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CycloneParser.RULE_functionParamsDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this.match(CycloneParser.LPAREN);
	        this.state = 868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 864;
	            this.identifier();
	            this.state = 865;
	            this.match(CycloneParser.COLON);
	            this.state = 866;
	            this.primitiveType();
	        }

	        this.state = 877;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 870;
	            this.match(CycloneParser.COMMA);
	            this.state = 871;
	            this.identifier();
	            this.state = 872;
	            this.match(CycloneParser.COLON);
	            this.state = 873;
	            this.primitiveType();
	            this.state = 879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 880;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnExpr() {
	    let localctx = new ReturnExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CycloneParser.RULE_returnExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this.match(CycloneParser.RETURN);
	        this.state = 883;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CycloneParser.RULE_primary);
	    try {
	        this.state = 893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 885;
	            this.parExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 886;
	            this.dotIdentifierExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 887;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 888;
	            this.initialExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 889;
	            this.freshExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 890;
	            this.oneExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 891;
	            this.returnExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 892;
	            this.funCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifierExpr() {
	    let localctx = new DotIdentifierExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CycloneParser.RULE_dotIdentifierExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 895;
	        this.identifier();
	        this.state = 898;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 896;
	            this.match(CycloneParser.DOT);
	            this.state = 897;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CycloneParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        this.match(CycloneParser.LPAREN);
	        this.state = 901;
	        this.expression();
	        this.state = 902;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funCall() {
	    let localctx = new FunCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CycloneParser.RULE_funCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.identifier();
	        this.state = 905;
	        this.match(CycloneParser.LPAREN);
	        this.state = 906;
	        this.expression();
	        this.state = 911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 907;
	            this.match(CycloneParser.COMMA);
	            this.state = 908;
	            this.expression();
	            this.state = 913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 914;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteStatement() {
	    let localctx = new IteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CycloneParser.RULE_iteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 916;
	        this.match(CycloneParser.IF);
	        this.state = 917;
	        this.parExpression();
	        this.state = 918;
	        this.statement();
	        this.state = 921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===104) {
	            this.state = 919;
	            this.match(CycloneParser.ELSE);
	            this.state = 920;
	            this.statement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationExpr() {
	    let localctx = new AnnotationExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CycloneParser.RULE_annotationExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 923;
	        this.match(CycloneParser.AT_SIGN);
	        this.state = 924;
	        this.match(CycloneParser.LABEL);
	        this.state = 925;
	        this.match(CycloneParser.COLON);
	        this.state = 926;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CycloneParser.EOF = antlr4.Token.EOF;
CycloneParser.ARROW = 1;
CycloneParser.BI_ARROW = 2;
CycloneParser.AT_SIGN = 3;
CycloneParser.BAR = 4;
CycloneParser.COLON = 5;
CycloneParser.COLON_COLON = 6;
CycloneParser.COLON_EQUAL = 7;
CycloneParser.COMMA = 8;
CycloneParser.DOT = 9;
CycloneParser.DOTDOT = 10;
CycloneParser.EQUAL = 11;
CycloneParser.GREATER = 12;
CycloneParser.GREATER_EQUAL = 13;
CycloneParser.HASH = 14;
CycloneParser.LBRACE = 15;
CycloneParser.LBRACK = 16;
CycloneParser.LESS = 17;
CycloneParser.LESS_EQUAL = 18;
CycloneParser.LPAREN = 19;
CycloneParser.MINUS = 20;
CycloneParser.NOT_EQUAL = 21;
CycloneParser.RBRACE = 22;
CycloneParser.RBRACK = 23;
CycloneParser.RPAREN = 24;
CycloneParser.SEMI = 25;
CycloneParser.SLASH = 26;
CycloneParser.STAR = 27;
CycloneParser.PLUS = 28;
CycloneParser.XOR = 29;
CycloneParser.IMPLIES = 30;
CycloneParser.NOT = 31;
CycloneParser.HAT = 32;
CycloneParser.P_OP_ONE = 33;
CycloneParser.PLUS_PLUS = 34;
CycloneParser.MINUS_MINUS = 35;
CycloneParser.TIMES_TIMES = 36;
CycloneParser.MOD = 37;
CycloneParser.OR = 38;
CycloneParser.AND = 39;
CycloneParser.ASSIGN_PLUS_EQ = 40;
CycloneParser.ASSIGN_MINUS_EQ = 41;
CycloneParser.ASSIGN_TIMES_EQ = 42;
CycloneParser.ASSIGN_DIV_EQ = 43;
CycloneParser.SHIFT_LEFT = 44;
CycloneParser.SHIFT_RIGHT = 45;
CycloneParser.DOUBLE_EQUAL = 46;
CycloneParser.GLOBAL = 47;
CycloneParser.NATIVE = 48;
CycloneParser.DEBUG = 49;
CycloneParser.LOG = 50;
CycloneParser.OUTPUT = 51;
CycloneParser.TRACE = 52;
CycloneParser.PRECISION = 53;
CycloneParser.TIMEOUT = 54;
CycloneParser.DETECT = 55;
CycloneParser.STATE = 56;
CycloneParser.NODE = 57;
CycloneParser.MACHINE = 58;
CycloneParser.GRAPH = 59;
CycloneParser.TRANS1 = 60;
CycloneParser.TRANS2 = 61;
CycloneParser.EDGE = 62;
CycloneParser.RECORD = 63;
CycloneParser.CONST = 64;
CycloneParser.ON = 65;
CycloneParser.LABEL = 66;
CycloneParser.INVARIANT = 67;
CycloneParser.INT = 68;
CycloneParser.BOOL = 69;
CycloneParser.REAL = 70;
CycloneParser.CHAR = 71;
CycloneParser.STRING = 72;
CycloneParser.ENUM = 73;
CycloneParser.WHERE = 74;
CycloneParser.START = 75;
CycloneParser.FINAL = 76;
CycloneParser.ABSTRACT = 77;
CycloneParser.NORMAL = 78;
CycloneParser.PREV = 79;
CycloneParser.GOAL = 80;
CycloneParser.CHECK = 81;
CycloneParser.FOR = 82;
CycloneParser.STOP = 83;
CycloneParser.AT = 84;
CycloneParser.VIA = 85;
CycloneParser.CONDITION = 86;
CycloneParser.REACH = 87;
CycloneParser.WITH = 88;
CycloneParser.ENUMERATE = 89;
CycloneParser.LET = 90;
CycloneParser.EACH = 91;
CycloneParser.ASSERT = 92;
CycloneParser.INITIAL = 93;
CycloneParser.IN = 94;
CycloneParser.FRESH = 95;
CycloneParser.OPTION = 96;
CycloneParser.ALWAYS = 97;
CycloneParser.SOME = 98;
CycloneParser.ONE = 99;
CycloneParser.UPTO = 100;
CycloneParser.FUNCTION = 101;
CycloneParser.RETURN = 102;
CycloneParser.IF = 103;
CycloneParser.ELSE = 104;
CycloneParser.INTLITERAL = 105;
CycloneParser.REALLITERAL = 106;
CycloneParser.CHARLITERAL = 107;
CycloneParser.STRINGLITERAL = 108;
CycloneParser.BOOLLITERAL = 109;
CycloneParser.ENUMLITERAL = 110;
CycloneParser.IDENT = 111;
CycloneParser.ML_COMMENT = 112;
CycloneParser.SL_COMMENT = 113;
CycloneParser.WS = 114;

CycloneParser.RULE_identifier = 0;
CycloneParser.RULE_head = 1;
CycloneParser.RULE_compOptions = 2;
CycloneParser.RULE_optionName = 3;
CycloneParser.RULE_machine = 4;
CycloneParser.RULE_machineScope = 5;
CycloneParser.RULE_stateExpr = 6;
CycloneParser.RULE_stateScope = 7;
CycloneParser.RULE_trans = 8;
CycloneParser.RULE_transScope = 9;
CycloneParser.RULE_transOp = 10;
CycloneParser.RULE_transDef = 11;
CycloneParser.RULE_transExclExpr = 12;
CycloneParser.RULE_invariantExpression = 13;
CycloneParser.RULE_inExpr = 14;
CycloneParser.RULE_invariantScope = 15;
CycloneParser.RULE_goal = 16;
CycloneParser.RULE_checkExpr = 17;
CycloneParser.RULE_forExpr = 18;
CycloneParser.RULE_stopExpr = 19;
CycloneParser.RULE_viaExpr = 20;
CycloneParser.RULE_withExpr = 21;
CycloneParser.RULE_letExpr = 22;
CycloneParser.RULE_pathCondAssignExpr = 23;
CycloneParser.RULE_pathExpr = 24;
CycloneParser.RULE_pathCondition = 25;
CycloneParser.RULE_orPathCondition = 26;
CycloneParser.RULE_andPathCondition = 27;
CycloneParser.RULE_xorPathCondition = 28;
CycloneParser.RULE_unaryPathCondition = 29;
CycloneParser.RULE_primaryCondition = 30;
CycloneParser.RULE_parPathCondition = 31;
CycloneParser.RULE_stateIncExpr = 32;
CycloneParser.RULE_pathPrimaryExpr = 33;
CycloneParser.RULE_pathOp = 34;
CycloneParser.RULE_label = 35;
CycloneParser.RULE_stateModifier = 36;
CycloneParser.RULE_literal = 37;
CycloneParser.RULE_intLiteral = 38;
CycloneParser.RULE_realLiteral = 39;
CycloneParser.RULE_boolLiteral = 40;
CycloneParser.RULE_stringLiteral = 41;
CycloneParser.RULE_charLiteral = 42;
CycloneParser.RULE_enumLiteral = 43;
CycloneParser.RULE_record = 44;
CycloneParser.RULE_recordScope = 45;
CycloneParser.RULE_recordVariableDeclGroup = 46;
CycloneParser.RULE_recordVariableDecl = 47;
CycloneParser.RULE_globalConstant = 48;
CycloneParser.RULE_globalVariableDecl = 49;
CycloneParser.RULE_localVariableDecl = 50;
CycloneParser.RULE_modifier = 51;
CycloneParser.RULE_type = 52;
CycloneParser.RULE_primitiveType = 53;
CycloneParser.RULE_enumType = 54;
CycloneParser.RULE_variableDeclarator = 55;
CycloneParser.RULE_whereExpr = 56;
CycloneParser.RULE_variableInitializer = 57;
CycloneParser.RULE_assertExpr = 58;
CycloneParser.RULE_statement = 59;
CycloneParser.RULE_expression = 60;
CycloneParser.RULE_conditionalImpliesExpression = 61;
CycloneParser.RULE_conditionalOrExpression = 62;
CycloneParser.RULE_conditionalAndExpression = 63;
CycloneParser.RULE_conditionalXorExpression = 64;
CycloneParser.RULE_equalityExpression = 65;
CycloneParser.RULE_relationalExpression = 66;
CycloneParser.RULE_additiveExpression = 67;
CycloneParser.RULE_multiplicativeExpression = 68;
CycloneParser.RULE_powExpression = 69;
CycloneParser.RULE_unaryExpression = 70;
CycloneParser.RULE_unaryExpressionNotPlusMinus = 71;
CycloneParser.RULE_oneExpr = 72;
CycloneParser.RULE_freshExpr = 73;
CycloneParser.RULE_initialExpr = 74;
CycloneParser.RULE_functionDeclaration = 75;
CycloneParser.RULE_functionBodyScope = 76;
CycloneParser.RULE_functionParamsDecl = 77;
CycloneParser.RULE_returnExpr = 78;
CycloneParser.RULE_primary = 79;
CycloneParser.RULE_dotIdentifierExpr = 80;
CycloneParser.RULE_parExpression = 81;
CycloneParser.RULE_funCall = 82;
CycloneParser.RULE_iteStatement = 83;
CycloneParser.RULE_annotationExpr = 84;

class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_identifier;
    }

	IDENT() {
	    return this.getToken(CycloneParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class HeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_head;
    }

	compOptions() {
	    return this.getTypedRuleContext(CompOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitHead(this);
		}
	}


}



class CompOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_compOptions;
    }

	OPTION() {
	    return this.getToken(CycloneParser.OPTION, 0);
	};

	optionName() {
	    return this.getTypedRuleContext(OptionNameContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCompOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCompOptions(this);
		}
	}


}



class OptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_optionName;
    }

	DEBUG() {
	    return this.getToken(CycloneParser.DEBUG, 0);
	};

	LOG() {
	    return this.getToken(CycloneParser.LOG, 0);
	};

	OUTPUT() {
	    return this.getToken(CycloneParser.OUTPUT, 0);
	};

	TRACE() {
	    return this.getToken(CycloneParser.TRACE, 0);
	};

	PRECISION() {
	    return this.getToken(CycloneParser.PRECISION, 0);
	};

	TIMEOUT() {
	    return this.getToken(CycloneParser.TIMEOUT, 0);
	};

	DETECT() {
	    return this.getToken(CycloneParser.DETECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOptionName(this);
		}
	}


}



class MachineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machine;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	machineScope() {
	    return this.getTypedRuleContext(MachineScopeContext,0);
	};

	EOF() {
	    return this.getToken(CycloneParser.EOF, 0);
	};

	MACHINE() {
	    return this.getToken(CycloneParser.MACHINE, 0);
	};

	GRAPH() {
	    return this.getToken(CycloneParser.GRAPH, 0);
	};

	compOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompOptionsContext);
	    } else {
	        return this.getTypedRuleContext(CompOptionsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachine(this);
		}
	}


}



class MachineScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	stateExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateExprContext);
	    } else {
	        return this.getTypedRuleContext(StateExprContext,i);
	    }
	};

	trans = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransContext);
	    } else {
	        return this.getTypedRuleContext(TransContext,i);
	    }
	};

	invariantExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InvariantExpressionContext,i);
	    }
	};

	goal() {
	    return this.getTypedRuleContext(GoalContext,0);
	};

	globalVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(GlobalVariableDeclContext,i);
	    }
	};

	globalConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantContext,i);
	    }
	};

	record = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordContext);
	    } else {
	        return this.getTypedRuleContext(RecordContext,i);
	    }
	};

	functionDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineScope(this);
		}
	}


}



class StateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	stateScope() {
	    return this.getTypedRuleContext(StateScopeContext,0);
	};

	STATE() {
	    return this.getToken(CycloneParser.STATE, 0);
	};

	NODE() {
	    return this.getToken(CycloneParser.NODE, 0);
	};

	stateModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateModifierContext);
	    } else {
	        return this.getTypedRuleContext(StateModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateExpr(this);
		}
	}


}



class StateScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateScope(this);
		}
	}


}



class TransContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_trans;
    }

	transScope() {
	    return this.getTypedRuleContext(TransScopeContext,0);
	};

	TRANS1() {
	    return this.getToken(CycloneParser.TRANS1, 0);
	};

	TRANS2() {
	    return this.getToken(CycloneParser.TRANS2, 0);
	};

	EDGE() {
	    return this.getToken(CycloneParser.EDGE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTrans(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTrans(this);
		}
	}


}



class TransScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	transOp() {
	    return this.getTypedRuleContext(TransOpContext,0);
	};

	transDef() {
	    return this.getTypedRuleContext(TransDefContext,0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	ON() {
	    return this.getToken(CycloneParser.ON, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransScope(this);
		}
	}


}



class TransOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transOp;
    }

	ARROW() {
	    return this.getToken(CycloneParser.ARROW, 0);
	};

	BI_ARROW() {
	    return this.getToken(CycloneParser.BI_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransOp(this);
		}
	}


}



class TransDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transDef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(CycloneParser.STAR, 0);
	};

	transExclExpr() {
	    return this.getTypedRuleContext(TransExclExprContext,0);
	};

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransDef(this);
		}
	}


}



class TransExclExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transExclExpr;
    }

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransExclExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransExclExpr(this);
		}
	}


}



class InvariantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantExpression;
    }

	INVARIANT() {
	    return this.getToken(CycloneParser.INVARIANT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	invariantScope() {
	    return this.getTypedRuleContext(InvariantScopeContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantExpression(this);
		}
	}


}



class InExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_inExpr;
    }

	IN() {
	    return this.getToken(CycloneParser.IN, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInExpr(this);
		}
	}


}



class InvariantScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantScope(this);
		}
	}


}



class GoalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_goal;
    }

	GOAL() {
	    return this.getToken(CycloneParser.GOAL, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	checkExpr() {
	    return this.getTypedRuleContext(CheckExprContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	letExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetExprContext);
	    } else {
	        return this.getTypedRuleContext(LetExprContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	pathCondAssignExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathCondAssignExprContext);
	    } else {
	        return this.getTypedRuleContext(PathCondAssignExprContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SEMI);
	    } else {
	        return this.getToken(CycloneParser.SEMI, i);
	    }
	};


	assertExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertExprContext);
	    } else {
	        return this.getTypedRuleContext(AssertExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGoal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGoal(this);
		}
	}


}



class CheckExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_checkExpr;
    }

	forExpr() {
	    return this.getTypedRuleContext(ForExprContext,0);
	};

	CHECK() {
	    return this.getToken(CycloneParser.CHECK, 0);
	};

	ENUMERATE() {
	    return this.getToken(CycloneParser.ENUMERATE, 0);
	};

	viaExpr() {
	    return this.getTypedRuleContext(ViaExprContext,0);
	};

	withExpr() {
	    return this.getTypedRuleContext(WithExprContext,0);
	};

	stopExpr() {
	    return this.getTypedRuleContext(StopExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCheckExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCheckExpr(this);
		}
	}


}



class ForExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_forExpr;
    }

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(CycloneParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(CycloneParser.EACH, 0);
	};

	UPTO() {
	    return this.getToken(CycloneParser.UPTO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterForExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitForExpr(this);
		}
	}


}



class StopExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stopExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	REACH() {
	    return this.getToken(CycloneParser.REACH, 0);
	};

	STOP() {
	    return this.getToken(CycloneParser.STOP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStopExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStopExpr(this);
		}
	}


}



class ViaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_viaExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	VIA() {
	    return this.getToken(CycloneParser.VIA, 0);
	};

	CONDITION() {
	    return this.getToken(CycloneParser.CONDITION, 0);
	};

	pathExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprContext);
	    } else {
	        return this.getTypedRuleContext(PathExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterViaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitViaExpr(this);
		}
	}


}



class WithExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_withExpr;
    }

	WITH() {
	    return this.getToken(CycloneParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWithExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWithExpr(this);
		}
	}


}



class LetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_letExpr;
    }

	LET() {
	    return this.getToken(CycloneParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLetExpr(this);
		}
	}


}



class PathCondAssignExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondAssignExpr;
    }

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondAssignExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondAssignExpr(this);
		}
	}


}



class PathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExpr;
    }

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExpr(this);
		}
	}


}



class PathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondition;
    }

	orPathCondition() {
	    return this.getTypedRuleContext(OrPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondition(this);
		}
	}


}



class OrPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_orPathCondition;
    }

	andPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(AndPathConditionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOrPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOrPathCondition(this);
		}
	}


}



class AndPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_andPathCondition;
    }

	xorPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(XorPathConditionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAndPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAndPathCondition(this);
		}
	}


}



class XorPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_xorPathCondition;
    }

	unaryPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryPathConditionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterXorPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitXorPathCondition(this);
		}
	}


}



class UnaryPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryPathCondition;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryPathCondition() {
	    return this.getTypedRuleContext(UnaryPathConditionContext,0);
	};

	primaryCondition() {
	    return this.getTypedRuleContext(PrimaryConditionContext,0);
	};

	parPathCondition() {
	    return this.getTypedRuleContext(ParPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryPathCondition(this);
		}
	}


}



class PrimaryConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primaryCondition;
    }

	stateIncExpr() {
	    return this.getTypedRuleContext(StateIncExprContext,0);
	};

	pathPrimaryExpr() {
	    return this.getTypedRuleContext(PathPrimaryExprContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimaryCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimaryCondition(this);
		}
	}


}



class ParPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parPathCondition;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParPathCondition(this);
		}
	}


}



class StateIncExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateIncExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateIncExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateIncExpr(this);
		}
	}


}



class PathPrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathPrimaryExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	pathOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOpContext);
	    } else {
	        return this.getTypedRuleContext(PathOpContext,i);
	    }
	};

	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.ARROW);
	    } else {
	        return this.getToken(CycloneParser.ARROW, i);
	    }
	};


	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LBRACK);
	    } else {
	        return this.getToken(CycloneParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.RBRACK);
	    } else {
	        return this.getToken(CycloneParser.RBRACK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathPrimaryExpr(this);
		}
	}


}



class PathOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathOp;
    }

	P_OP_ONE() {
	    return this.getToken(CycloneParser.P_OP_ONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathOp(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_label;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLabel(this);
		}
	}


}



class StateModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateModifier;
    }

	START() {
	    return this.getToken(CycloneParser.START, 0);
	};

	FINAL() {
	    return this.getToken(CycloneParser.FINAL, 0);
	};

	ABSTRACT() {
	    return this.getToken(CycloneParser.ABSTRACT, 0);
	};

	NORMAL() {
	    return this.getToken(CycloneParser.NORMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateModifier(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_literal;
    }

	intLiteral() {
	    return this.getTypedRuleContext(IntLiteralContext,0);
	};

	realLiteral() {
	    return this.getTypedRuleContext(RealLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	charLiteral() {
	    return this.getTypedRuleContext(CharLiteralContext,0);
	};

	enumLiteral() {
	    return this.getTypedRuleContext(EnumLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class IntLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_intLiteral;
    }

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIntLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIntLiteral(this);
		}
	}


}



class RealLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_realLiteral;
    }

	REALLITERAL() {
	    return this.getToken(CycloneParser.REALLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRealLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRealLiteral(this);
		}
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_boolLiteral;
    }

	BOOLLITERAL() {
	    return this.getToken(CycloneParser.BOOLLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBoolLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stringLiteral;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class CharLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_charLiteral;
    }

	CHARLITERAL() {
	    return this.getToken(CycloneParser.CHARLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCharLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCharLiteral(this);
		}
	}


}



class EnumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumLiteral;
    }

	ENUMLITERAL() {
	    return this.getToken(CycloneParser.ENUMLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumLiteral(this);
		}
	}


}



class RecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_record;
    }

	RECORD() {
	    return this.getToken(CycloneParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordScope() {
	    return this.getTypedRuleContext(RecordScopeContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecord(this);
		}
	}


}



class RecordScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	recordVariableDeclGroup() {
	    return this.getTypedRuleContext(RecordVariableDeclGroupContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordScope(this);
		}
	}


}



class RecordVariableDeclGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDeclGroup;
    }

	recordVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(RecordVariableDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDeclGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDeclGroup(this);
		}
	}


}



class RecordVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator() {
	    return this.getTypedRuleContext(VariableDeclaratorContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDecl(this);
		}
	}


}



class GlobalConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstant;
    }

	CONST() {
	    return this.getToken(CycloneParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.EQUAL);
	    } else {
	        return this.getToken(CycloneParser.EQUAL, i);
	    }
	};


	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstant(this);
		}
	}


}



class GlobalVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalVariableDecl(this);
		}
	}


}



class LocalVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_localVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLocalVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLocalVariableDecl(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_modifier;
    }

	GLOBAL() {
	    return this.getToken(CycloneParser.GLOBAL, 0);
	};

	NATIVE() {
	    return this.getToken(CycloneParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitModifier(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveType;
    }

	INT() {
	    return this.getToken(CycloneParser.INT, 0);
	};

	BOOL() {
	    return this.getToken(CycloneParser.BOOL, 0);
	};

	REAL() {
	    return this.getToken(CycloneParser.REAL, 0);
	};

	STRING() {
	    return this.getToken(CycloneParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumType;
    }

	ENUM() {
	    return this.getToken(CycloneParser.ENUM, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumType(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class WhereExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_whereExpr;
    }

	WHERE() {
	    return this.getToken(CycloneParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWhereExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWhereExpr(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class AssertExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertExpr;
    }

	ASSERT() {
	    return this.getToken(CycloneParser.ASSERT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	annotationExpr() {
	    return this.getTypedRuleContext(AnnotationExprContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	ALWAYS() {
	    return this.getToken(CycloneParser.ALWAYS, 0);
	};

	SOME() {
	    return this.getToken(CycloneParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertExpr(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_expression;
    }

	conditionalImpliesExpression() {
	    return this.getTypedRuleContext(ConditionalImpliesExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	ASSIGN_PLUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_PLUS_EQ, 0);
	};

	ASSIGN_MINUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_MINUS_EQ, 0);
	};

	ASSIGN_TIMES_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_TIMES_EQ, 0);
	};

	ASSIGN_DIV_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_DIV_EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalImpliesExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalImpliesExpression;
    }

	conditionalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExpressionContext,i);
	    }
	};

	IMPLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.IMPLIES);
	    } else {
	        return this.getToken(CycloneParser.IMPLIES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalImpliesExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalImpliesExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalAndExpression;
    }

	conditionalXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalXorExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class ConditionalXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalXorExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalXorExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	DOUBLE_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.DOUBLE_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.DOUBLE_EQUAL, i);
	    }
	};


	NOT_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.NOT_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.NOT_EQUAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_relationalExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	LESS_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.LESS_EQUAL, i);
	    }
	};


	GREATER_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.GREATER_EQUAL, i);
	    }
	};


	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS);
	    } else {
	        return this.getToken(CycloneParser.LESS, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER);
	    } else {
	        return this.getToken(CycloneParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.PLUS);
	    } else {
	        return this.getToken(CycloneParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MINUS);
	    } else {
	        return this.getToken(CycloneParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_multiplicativeExpression;
    }

	powExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.STAR);
	    } else {
	        return this.getToken(CycloneParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SLASH);
	    } else {
	        return this.getToken(CycloneParser.SLASH, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MOD);
	    } else {
	        return this.getToken(CycloneParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class PowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_powExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	TIMES_TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.TIMES_TIMES);
	    } else {
	        return this.getToken(CycloneParser.TIMES_TIMES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPowExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpression;
    }

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(CycloneParser.MINUS, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpressionNotPlusMinus;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	MINUS_MINUS() {
	    return this.getToken(CycloneParser.MINUS_MINUS, 0);
	};

	PLUS_PLUS() {
	    return this.getToken(CycloneParser.PLUS_PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}


}



class OneExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_oneExpr;
    }

	ONE() {
	    return this.getToken(CycloneParser.ONE, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOneExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOneExpr(this);
		}
	}


}



class FreshExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_freshExpr;
    }

	FRESH() {
	    return this.getToken(CycloneParser.FRESH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFreshExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFreshExpr(this);
		}
	}


}



class InitialExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_initialExpr;
    }

	INITIAL() {
	    return this.getToken(CycloneParser.INITIAL, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInitialExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInitialExpr(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionDeclaration;
    }

	FUNCTION() {
	    return this.getToken(CycloneParser.FUNCTION, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	functionBodyScope() {
	    return this.getTypedRuleContext(FunctionBodyScopeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class FunctionBodyScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionBodyScope;
    }

	functionParamsDecl() {
	    return this.getTypedRuleContext(FunctionParamsDeclContext,0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	localVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(LocalVariableDeclContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionBodyScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionBodyScope(this);
		}
	}


}



class FunctionParamsDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParamsDecl;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COLON);
	    } else {
	        return this.getToken(CycloneParser.COLON, i);
	    }
	};


	primitiveType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimitiveTypeContext);
	    } else {
	        return this.getTypedRuleContext(PrimitiveTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParamsDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParamsDecl(this);
		}
	}


}



class ReturnExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_returnExpr;
    }

	RETURN() {
	    return this.getToken(CycloneParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterReturnExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitReturnExpr(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primary;
    }

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	initialExpr() {
	    return this.getTypedRuleContext(InitialExprContext,0);
	};

	freshExpr() {
	    return this.getTypedRuleContext(FreshExprContext,0);
	};

	oneExpr() {
	    return this.getTypedRuleContext(OneExprContext,0);
	};

	returnExpr() {
	    return this.getTypedRuleContext(ReturnExprContext,0);
	};

	funCall() {
	    return this.getTypedRuleContext(FunCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class DotIdentifierExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_dotIdentifierExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(CycloneParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterDotIdentifierExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitDotIdentifierExpr(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class FunCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_funCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunCall(this);
		}
	}


}



class IteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_iteStatement;
    }

	IF() {
	    return this.getToken(CycloneParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CycloneParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIteStatement(this);
		}
	}


}



class AnnotationExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_annotationExpr;
    }

	AT_SIGN() {
	    return this.getToken(CycloneParser.AT_SIGN, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAnnotationExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAnnotationExpr(this);
		}
	}


}




CycloneParser.IdentifierContext = IdentifierContext; 
CycloneParser.HeadContext = HeadContext; 
CycloneParser.CompOptionsContext = CompOptionsContext; 
CycloneParser.OptionNameContext = OptionNameContext; 
CycloneParser.MachineContext = MachineContext; 
CycloneParser.MachineScopeContext = MachineScopeContext; 
CycloneParser.StateExprContext = StateExprContext; 
CycloneParser.StateScopeContext = StateScopeContext; 
CycloneParser.TransContext = TransContext; 
CycloneParser.TransScopeContext = TransScopeContext; 
CycloneParser.TransOpContext = TransOpContext; 
CycloneParser.TransDefContext = TransDefContext; 
CycloneParser.TransExclExprContext = TransExclExprContext; 
CycloneParser.InvariantExpressionContext = InvariantExpressionContext; 
CycloneParser.InExprContext = InExprContext; 
CycloneParser.InvariantScopeContext = InvariantScopeContext; 
CycloneParser.GoalContext = GoalContext; 
CycloneParser.CheckExprContext = CheckExprContext; 
CycloneParser.ForExprContext = ForExprContext; 
CycloneParser.StopExprContext = StopExprContext; 
CycloneParser.ViaExprContext = ViaExprContext; 
CycloneParser.WithExprContext = WithExprContext; 
CycloneParser.LetExprContext = LetExprContext; 
CycloneParser.PathCondAssignExprContext = PathCondAssignExprContext; 
CycloneParser.PathExprContext = PathExprContext; 
CycloneParser.PathConditionContext = PathConditionContext; 
CycloneParser.OrPathConditionContext = OrPathConditionContext; 
CycloneParser.AndPathConditionContext = AndPathConditionContext; 
CycloneParser.XorPathConditionContext = XorPathConditionContext; 
CycloneParser.UnaryPathConditionContext = UnaryPathConditionContext; 
CycloneParser.PrimaryConditionContext = PrimaryConditionContext; 
CycloneParser.ParPathConditionContext = ParPathConditionContext; 
CycloneParser.StateIncExprContext = StateIncExprContext; 
CycloneParser.PathPrimaryExprContext = PathPrimaryExprContext; 
CycloneParser.PathOpContext = PathOpContext; 
CycloneParser.LabelContext = LabelContext; 
CycloneParser.StateModifierContext = StateModifierContext; 
CycloneParser.LiteralContext = LiteralContext; 
CycloneParser.IntLiteralContext = IntLiteralContext; 
CycloneParser.RealLiteralContext = RealLiteralContext; 
CycloneParser.BoolLiteralContext = BoolLiteralContext; 
CycloneParser.StringLiteralContext = StringLiteralContext; 
CycloneParser.CharLiteralContext = CharLiteralContext; 
CycloneParser.EnumLiteralContext = EnumLiteralContext; 
CycloneParser.RecordContext = RecordContext; 
CycloneParser.RecordScopeContext = RecordScopeContext; 
CycloneParser.RecordVariableDeclGroupContext = RecordVariableDeclGroupContext; 
CycloneParser.RecordVariableDeclContext = RecordVariableDeclContext; 
CycloneParser.GlobalConstantContext = GlobalConstantContext; 
CycloneParser.GlobalVariableDeclContext = GlobalVariableDeclContext; 
CycloneParser.LocalVariableDeclContext = LocalVariableDeclContext; 
CycloneParser.ModifierContext = ModifierContext; 
CycloneParser.TypeContext = TypeContext; 
CycloneParser.PrimitiveTypeContext = PrimitiveTypeContext; 
CycloneParser.EnumTypeContext = EnumTypeContext; 
CycloneParser.VariableDeclaratorContext = VariableDeclaratorContext; 
CycloneParser.WhereExprContext = WhereExprContext; 
CycloneParser.VariableInitializerContext = VariableInitializerContext; 
CycloneParser.AssertExprContext = AssertExprContext; 
CycloneParser.StatementContext = StatementContext; 
CycloneParser.ExpressionContext = ExpressionContext; 
CycloneParser.ConditionalImpliesExpressionContext = ConditionalImpliesExpressionContext; 
CycloneParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
CycloneParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
CycloneParser.ConditionalXorExpressionContext = ConditionalXorExpressionContext; 
CycloneParser.EqualityExpressionContext = EqualityExpressionContext; 
CycloneParser.RelationalExpressionContext = RelationalExpressionContext; 
CycloneParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CycloneParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CycloneParser.PowExpressionContext = PowExpressionContext; 
CycloneParser.UnaryExpressionContext = UnaryExpressionContext; 
CycloneParser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
CycloneParser.OneExprContext = OneExprContext; 
CycloneParser.FreshExprContext = FreshExprContext; 
CycloneParser.InitialExprContext = InitialExprContext; 
CycloneParser.FunctionDeclarationContext = FunctionDeclarationContext; 
CycloneParser.FunctionBodyScopeContext = FunctionBodyScopeContext; 
CycloneParser.FunctionParamsDeclContext = FunctionParamsDeclContext; 
CycloneParser.ReturnExprContext = ReturnExprContext; 
CycloneParser.PrimaryContext = PrimaryContext; 
CycloneParser.DotIdentifierExprContext = DotIdentifierExprContext; 
CycloneParser.ParExpressionContext = ParExpressionContext; 
CycloneParser.FunCallContext = FunCallContext; 
CycloneParser.IteStatementContext = IteStatementContext; 
CycloneParser.AnnotationExprContext = AnnotationExprContext; 
