/**
 * A boolean switch requirements
 * Written by: Hao Wu
 * 
 * A switch has two buttons: Set and Reset.
 * Pressing Set turns the switch on.
 * Pressing Reset turns the switch off.
 * 
 * If both Set and Reset are initially both unpressed, the initial 
 * state of the switch is determined by the third signal. 
 */

option-trace=true;
graph Switch{
	
	enum {set,reset,unpressed} button;
	/* use int to model the signal and switch */
	int signal=2;
	int switch=signal;
	
	abstract start node S{}

	normal final node On {
		button=#set;
		switch=1;
	}

	normal final node Off{
		button=#reset;
		switch=0;
	}

	normal final node ThirdSignal{
		button=#unpressed;
		switch=signal;
	}

	edge { S -> On where button==#set;}
	edge { S -> Off where button==#reset;}
	edge { S -> ThirdSignal where button==#unpressed;}

	edge { Off -> On }
	edge { Off -> Off }

	edge { On -> Off }
	edge { On -> On }

	edge {ThirdSignal -> ThirdSignal }
	edge {ThirdSignal -> On }
	edge {ThirdSignal -> Off }

	goal{
		
		/* R0: begin with the button unpressed. */
		assert (initial(button)==#unpressed);

		/* R1: if the button is unpressed,the switch should have the 3rd signal.*/
		assert (initial(button)==#unpressed => initial(switch)==initial(signal));

		/* R2: if the button is pressed,the switch should either be ON or OFF.*/
		assert (initial(button)!=#unpressed => (switch==0 || switch==1));

		/* R3: make sure a sequence covering all possible states of the switch. */
		let state_coverage = (On && Off && ThirdSignal);
		
		check for 3 condition (state_coverage)
	}
}