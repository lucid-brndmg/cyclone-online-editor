stages:
  - image
  - build
  - test
  - deploy

# run jobs only for changes to  branches that are sources to a merge request
# and all changes to the default branch
# (don't run on commits to branches if there is no merge request from it)
.standard-rules:       # hidden job to hold the common rules
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# setting PUBLIC_URL here will propagate to the other jobs
# and will create an optimized production build that can be hosted on
# the departmental server. The same variable can be used to set up the
# environment within the gitlab GUI
variables:
  PUBLIC_URL: "/"

build frontend:
  extends:
    - .standard-rules
  stage: build
  tags:
    - dockerbuild
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml build --pull --push frontend

build exec server:
  extends:
    - .standard-rules
  stage: build
  tags:
    - dockerbuild
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml build --pull --push exec-server

deploy to prod server:
  stage: deploy
  tags:
    - wc2
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  environment:
    name: prod
    url: https://cyclone.cs.nuim.ie
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml down
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml up --no-build --wait
